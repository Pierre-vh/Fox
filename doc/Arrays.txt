Arrays : Declaration
    let x : int[];
    let x : int[] = [0,1,2,3,4,5,6];
    let x : int[] = [0]*16;     // Fill the array with 16 Zeroes
        // Optional, more flexible syntax could look like []*16 to reserve 16 slot in the array.
    let x : int[] = [1,2,3]*16; // Fill the array with 16 times the pattern 1,2,3.

Final Array Literals syntax :

<type> will be changed to <typename>
the new <type> rule to replace the old will be :
<type> = <typename> { '[]' } to create arrays.
	int[] is a 1d array
	int[][] is a 2d array,
	int[][][] is a 3d array, etc.

<array_lit>	= '[' [<expr_list>] ']'

But where's the type of the array literal you say? It's not used. The type of the array literal is inferred from the context.

I think that overall this syntax is the cleanest and most user friendly! Let's have fun with it : 
fill an array with the Nth first terms of the fibonnaci suite!

func arrayFib(arr : &int[],n : int)
{
    if(n <= 0)
        arr = [];
    else if(n == 1)
        arr = [1]; 
    else if(n == 2)
        arr = [1,1];
    else 
    {
        arr = [1]*n;    // Fill the array with 1's 
        n = n-2;        // Substract 2 of n, since the first 2 terms are 1
        let idx : int = 2; // Start to fill at index 2
        while(n)
        {
            arr[idx] = (arr[idx-1] + arr[idx-2]));
            idx = idx+1;
            n = n-1;
        }
    }
}

