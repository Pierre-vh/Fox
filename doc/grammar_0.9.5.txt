Fox Grammar version 0.9.5

Note : $ denotes a terminal, a token recognized by our lexer.

##Base rule (The parsing process starts from this rule.)
<fox_file>	= {(<func_decl> | <var_decl>)}+			// At least 1 function/variable declaration.

##General Rules##

<id> 				= $id
<type> 				= "int" 	| "float"		| "bool"	| "string"		| "char"
<literal>			= $int_val 	| $float_val	| $bool_val | $string_val 	| $char_val

<type_spec>			= ':' ["const"] <type>				
<compound_statement>= '{' {<stmt>} '}'		// Statements delimited by curly brackets.

<import>        = ("import" | "using") <id> {'.' (<id> | '*')} ';' // Note: Stop (break loop) if '*' is found

<stmt>			= <var_decl> | <expr_stmt> | <condition> | <while_loop> | <rtr_stmt> 
<body>			= <stmt> | <compound_statement>

<expr_list>		= <expr> {',' <expr> }
<parens_expr_list>	= '(' [ <expr_list> ] ')'
<expr_stmt>		= ';' | <expr> ';' 
<parens_expr>	= '(' <expr> ')'

<decl_call>		= <id> [ <parens_expr_list> ]
<primary>		= <literal> | <parens_expr> | <decl_call>
<member_access>	= <primary> { '.' <id> [ <parens_expr_list> ] }
<exp_expr>		= <member_access> [ <exponent_operator> <prefix_expr> ]
<prefix_expr>   = <unary_operator> <prefix_expr> | <exp_expr>
<cast_expr>     = <prefix_expr> ["as" <type]
<binary_expr>   = <cast_expr> { <binary_operator> <cast_expr> }	
<expr>          = <binary_expr> [<assign_operator> <expr>] 

<exponent_operator> = '*' '*'
<assign_operator> = '='
<binary_operator> =  '+' | '-' | '*' | '/' | '%' | ('&' '&') | ('|' '|') | ('<' | '>' | ('=' '=') | ('>' '=') | ('<' '=') | ('!' '=') 
<unary_operator>  =  '!' | '-' | '+'  // inversion, -,+ (+ is essentially a non op for now, it's syntaxic sugar)

/*
	Final operation priority
	. (member acces) () (function call)
	**
	unary - ! +
	cast "as"
	* / % 
	+ -
	< > <= >= 
	== !=
	&&
	||
	=
*/

##Variables##
<var_decl>		= "let" <id> <type_spec> ['=' <expr>] ';' 	// You can define variables in a rust-like fashion, but you can specify the type of the variable. const variables can't be modified.

##Functions##
<func_decl>		= "func" <id> '(' [<arg_decl_list>] ')'[':' <type>] <compound_statement>	// Note about type_spec : if it is not present, the function returns void.
<arg_decl_list> = [<arg_decl> {',' <arg_decl>}*]
<arg_decl>		= <id> : ["const"]['&'] <type>
<expr_list>		= '(' [<expr> {',' <expr>}] ')'
<rtr_stmt>		= "return" [<expr>] ';'

##Control Flow##
<condition>			= "if"		<parens_expr> <body> ["else" <body>]
<while_loop> 		= "while"	<parens_expr> <body>