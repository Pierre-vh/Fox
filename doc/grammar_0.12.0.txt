Fox Grammar version 0.12.0

// Note : { } means "0 or more", [ ] means "optional"

##Base rule (The parsing process starts from this rule.)
<fox_unit>	= {<declaration>}1+	// Note, in the future I'll add the <import> too, but not yet. I'll implement them later.
<declaration> = <func_decl> | <var_decl>

##General Rules##

<id> 				= Any non-reserved keyword that is recognized by the following regular expression : (([A-Z]|[a-z]|_)([A-Z]|[0-9]|[a-z]|_)?)+ that contains at least one character.
<builtin_type_name> 			= "int" 	| "float"		| "bool"	| "string"		| "char"
<primitive_literal>	= One literal of the following type : Integer, Floating-point, Boolean, String, Char

// a Type
<type> = <builtin_type_name> { '[' ']' }

// Fully qualified type spec
<fq_type_spec>	= ':' ["const"] ['&'] <type>

<compound_statement>= '{' {<stmt>} '}'

<import>        = ("import" | "using") <id> {'.' (<id> | '*')} ';' // Note: Stop (break loop) if '*' is found

<stmt>			= <var_decl> | <expr_stmt> | <condition> | <while_loop> | <rtr_stmt> 
<body>			= <stmt> | <compound_statement>

<expr_list>		= <expr> {',' <expr> }
<parens_expr_list>	= '(' [ <expr_list> ] ')'
<expr_stmt>		= ';' | <expr> ';' 
<parens_expr>	= '(' <expr> ')'

<suffix>		= '.' <decl_call> | '[' <expr> ']'
<array_literal>	= '[' [<expr_list>] ']'
<literal>		= <primitive_literal> | <array_literal>
<decl_call>		= <id> [ <parens_expr_list> ]
<primary>		= <literal> | <parens_expr> | <decl_call>
<array_or_member_access>	= <primary> { <suffix> }
<exp_expr>		= <array_or_member_access> [ <exponent_operator> <prefix_expr> ]
<prefix_expr>   = <unary_operator> <prefix_expr> | <exp_expr>
<cast_expr>     = <prefix_expr> ["as" <type>]
<binary_expr>   = <cast_expr> { <binary_operator> <cast_expr> }	// note about this rule: use precedence-climbing to manage priority of operation ! (see ParseExpr.cpp, line 237+ to see how it's handled)
<expr>          = <binary_expr> [<assign_operator> <expr>] 

<exponent_operator> = '*' '*'
<assign_operator> = '='
<binary_operator> =  '+' | '-' | '*' | '/' | '%' | ('&' '&') | ('|' '|') | ('<' | '>' | ('=' '=') | ('>' '=') | ('<' '=') | ('!' '=') 
<unary_operator>  =  '!' | '-' | '+'

/*
	OPERATION PRIORITY FROM HIGHEST TO LOWEST
		Function call "()"
		Member access ".", Array Access "[]"
		**
		unary - ! +
		cast "as"
		* / % 
		+ -
		< > <= >= 
		== !=
		&&
		||
		= 
*/

##Variables##
<var_decl>		= "let" <id> <fq_type_spec> ['=' <expr>] ';' 

##Functions##
<func_decl>		= "func" <id> '(' [<arg_decl> {',' <arg_decl>}] ')'[':' <type>] <compound_statement>
<arg_decl>		= <id> <fq_type_spec>
<expr_list>		= '(' [<expr> {',' <expr>}] ')'
<rtr_stmt>		= "return" [<expr>] ';'

##Control Flow##
<condition>			= "if"		<parens_expr> <body> ["else" <body>]
<while_loop> 		= "while"	<parens_expr> <body>