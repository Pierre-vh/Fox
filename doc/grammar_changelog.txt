Fox's Grammar Changelog : 
* 0.0 ->	First version that had a lot of error (it was my first try at making a full ebnf grammar).
* 0.1 ->	Reworked expressions, added one-stmt blocks and support for unary operators ! and - and type conversion.
* 0.2 ->	Grammar cleanup
* 0.3 ->	Now using Expression Statements instead of f_call_stmt and var_ass_stmt. 
		Added <expr_stmt> which replaces var_assign & f_call statements.
* 0.4 ->	Namespaces removed
* 0.4.1->	<block> renamed to <compound_statement>. 
* 0.4.2->	<return> : <expr> is now optional (to allow "return;" in void functions). 
* 0.4.3->	Deleted the <ctrl_flow> non-terminal and added  <condition> | <while_loop> to \<stmt> rule.
* 0.5->		Expression rework. They're now far more flexible and support unary operation chaining, like !!false, !-3, etc.
* 0.5.1->	Changed Exponent sign to "**" instead of '^' like in other languages ( python, fortran,.. )
* 0.6->		
	Final pass on the expressions : right associativity is directly specified in the grammar for exponent and = operators. 
			Changed exponent operator's priority to be mathematically correct.
			Renamed <const> to <literal>*
			Added '+' unary op
* 0.6.5-> 	
		Changed <compound_statement> rule : removed <statement> as an option
		Changed statement rule: added the <compound_statement> and <rtr_stmt> rule as options
		Changed <compound_statement> in statements that used it before to just <statement>
* 0.7.0->	
Removed the <eoi> nonterminal. It was completly useless. I just replaced all of them with ';'
		Changed (and corrected) the grammar for if/else if/else statements. It had a typo, and i've cleaned it up a bit to eliminate redudancy.
		Added the empty ';' statement to the expression statement, like in C and C++.
		Removed the namespace rule and added it to the scrapped idea category
		Removed the <xxx_kw> nonterminal, as it was useless. I replaced every <XXX_kw> rule by the proper keyword (e.g. <wh_kw> -> "while")

* 0.8.0-> 
		Balanced the <condition> grammar to use a C-like syntax, which is better for codegen and more stable, and also easier to parse! 
		Added a <parens_expr> rule to avoid repetitions. 
		Minor changes to function declaration rules (only rule changes, but they work exactly the same) 

* 0.8.1 -> 
		Changed the <value> rule to use the new <parens_expr> rule. 

* 0.9.0	-> 
		Removed <compound_statement> as an alternative in <stmt> rule 
		Created a new <body> rule that can either be a <stmt> or a <compound_stmt> 
		<condition> and <while_loop> now use <body> instead of <stmt> 		
			Note: the only consequence of theses change is that it's now forbidden to have "free" compound statements. (not tied to a condition,loop,etc.) 
		Removed <f_call> rule  
		Removed <callable> as an alternative in <value>, now using <id> instead 
		Added a <trailer> rule	-> = '(' <expr_list> ')' | ('.' <id>) 
		Added a <atom> rule		-> <value> {<trailer>} 
		<exp_expr> rule modified to use <atom> instead of <value> 

* 0.9.5 -> 
	This version is a fix for the 0.9.0's  ill-formed grammar. The changelong is a 0.8.1->0.9.5 changelog. 
	Removed useless description text at the top of the grammar 
		Removed <compound_statement> as an alternative in <stmt> rule 
		Created a new <body> rule that can either be a <stmt> or a <compound_stmt> 
		<condition> and <while_loop> now use <body> instead of <stmt> 
			Note: the only consequence of theses change is that it's now forbidden to have "free" compound statements. (not tied to a condition,loop,etc.) 
		Removed <f_call> rule 
		Added <expr_list> rule (it was referenced in other rules, but not defined anywhere!) 
			<expr_list> = <expr> {',' <expr> } 
		Added <parens_expr_list> = '(' [<expr_list> ] ')' 
		Removed <callable>
		Removed <callable> as an alternative in <value>, now using <decl_call> instead 
		Reworked <expr> grammar 
			Added <decl_call> rule to represent both variable and function calls at "primary" level 
			<value> renamed to <primary>, removed <id> and added <decl_call> instead 
			Deleted <atom> and <trailer> rules 
			Added <member_access> = <primary> { '.' <id> [ <parens_expr_list> ] } 
			Replaced the call to <atom> in <exp_expr> to <member_access> 

* 0.10.0 ->
	Note:
		I've decided to change the grammar to add a better, more uniform support for complex code. Most of the 
		changes introduced here won't be implemented right away (like member access) but I prefer to make theses changes right now
		since they change how the AST is formed because it changes the priority of ().
	+ Added <array_access> rule // I've decided to add arrays now, since it's a quite vital component imo.
		<array_access>	= '[' <expr> ']'
	~ Modified <decl_call>
		<decl_call>		= <id> [ <parens_expr_list> ] { <array_access> }
	~ Modified <member_access>
		<member_access>	= <primary> { '.' <decl_call> }

* 0.11.0
	Note : Lots of change to make the grammar less repetitive and to suit the new type system better.
	+ Changed <type_spec> to <fq_type_spec>
		<fq_type_spec>	= ':' ["const"] ['&'] <type>
	- Removed <arg_type_spec>
	~ Modified <var_decl> to use <fq_type_spec> instead of <type_spec>
	~ Modified <arg_decl> to use <fq_type_spec>
		<arg_decl>	= <id> <fq_type_spec>

* 0.12.0
	Note: Implementing Array literals & Array types declaration.
	~ Renamed <type> to <typename>, but non-terminals using the <type> rule still use a rule <type>, defined below.
		<builtin_type_name> = "int" |  "float" | "char" | "bool" | "string"
	- Removed <array_access> rule
	+ Added new <type> rule
		<type> = <builtin_type_name> { '[' ']' }
	~ Renamed <literal> to <primitive_literal> rule, but non-terminals using the <literal> rule still use a <literal> rule, defined below.
		<primitive_literal>	= One literal of the following type : Integer, Floating-point, Boolean, String, Char
	+ Added <array_literal> rule 
		<array_literal>	= '[' [<expr_list>] ']'
	~ Changed <literal> rule:
		<literal> = <primitive_literal> | <array_literal>
	~ Changed <decl_call> rule:
		<decl_call>	= <id> [ <parens_expr_list> ]
	+ Added <suffix> rule
		<suffix> = "." <decl_call> | '[' <expr> ']'
	~ Changed and renamed <array_access> rule
		<array_or_member_access>	= <primary> { <suffix> }
	~ Changed <exp_expr> rule
		<exp_expr>	= <array_or_member_access> [ <exponent_operator> <prefix_expr> ]

* 0.13.0
	Note: Reverting some earlier changes, and finalizing the operator precedence to be more akin to C#/Java/C++'s/Etc..
	~ Modified <suffix>
		<suffix> = '.' <id> | '[' <expr> ']' | <parens_expr_list>
					   ^^^^					 ^^^^^^^^^^^^^^^^^^^^^
	~ Renamed <decl_call> to <declref>, and modified it
		<declref> = <id>
		 ^^^^^^^^		 ^^^^^^^^^^^^^^
	~ Renamed <array_or_member_access> to <suffix_expr>
		<suffix_expr> = <primary> { <suffix> }
		^^^^^^^^^^^^

* 0.13.1
	~ Renamed <fq_type_spec> to <qualtype>
	~ Reorganized the grammar a bit into more explicit categories.

* 0.13.2
	~ Modified <qualtype> (Removed the ':')
		<qualtype> =  ["const"] ['&'] <type>
	~ Modified <var_decl> (Added the ':')
		<var_decl> = "let" <id> ':' <qualtype> ['=' <expr>] ';' 
	~ Modified <arg_decl> (Added the ':')
		<arg_decl>	= <id> ':' <qualtype>


		