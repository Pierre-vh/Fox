This file contains some features that are definitely doable, but are low priority.
-> This is a low-priority to-do list.

Portability
  CMake
    Currently I only code on Visual Studio, so I only set compiler arguments for Visual Studio. It would be great to, instead
    set them for every major compiler (CLang/GCC/MSVC) so the project is fully portable.
  Code
    I should try to compile the code on Linux one day, using GCC and CLang, to check for issues and try to make the code fully
    portable.

Code QoL: 
  StringManipulator:
    1) Rework it as an iterator, because this class literaly emulates an iterator.

Reworks:
  > Lexer Rework
      > Stop using a DFA. Use a proper grammar with a recursive descent technique
        and a config file (.def) to register valid terminals (so it's easy to add new ones)
      > Register tokens/terminals in a .def file? Also use the Operators.def file!
      > Operators (such as '==') should generate only one token 

Performance:
  Diagnostics:
    1) The Diagnostic object is quite large (few hundred bytes), and, as it's nearly always a temporary object, this could maybe
    have a cost on performance. Tests needs to be done. If it has really a big cost on performance, store all the diagnostic's data
    inside the DiagnosticsEngine and restrict the number of in-flight diagnostics allowed. (Like CLang does)

Features:
  LinearAllocator 
    Add a function to rollback the AllocPtr to a specific pointer, which would be
    used by the companion delete when a constructor has thrown.
    Also it could be a good idea to backup the latest AllocPtr to compare it with the rollback ptr! (assert that lastAllocPtr < rollbackPtr < allocPtr)
    (just in debug builds to do more checking)