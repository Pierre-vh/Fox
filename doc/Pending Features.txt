This file contains some features that are definitely doable, but are low priority.
-> This is a low-priority to-do list.

Portability
	CMake
		Currently I only code on Visual Studio, so I only set compiler arguments for Visual Studio. It would be great to, instead
		set them for every major compiler (CLang/GCC/MSVC) so the project is fully portable.
	Code
		I should run a Linux VM and try to compile the code there using GCC and CLang, to check for issues and try to make the code fully
		portable.

QoL: 
	Diagnostics:
		1) Add the opportunity to add relevant pieces of code (which would be underlined with tildes '~') to a diagnostic.
			Example use cases: operands of a '+' expr
	StringManipulator:
		2) Most of the class's method are literally simulating an iterator. I could easily move most of the class's feature
		   to an iterator, accessible through .begin()/.end() functions. The iterator would be named UTF8Iterator, and might as
		   well serve as both the constant and non constant iterator, but I need to do a bit of reading on how to implement
		   custom iterators.

Reworks:
	> Lexer Rework (Exact time to be decided, might come before/after Semantic Analysis)
			> Create another folder "Lexer_Rework" which will contain the new source code for the Lexer, and I'll write the code there
			  test it and make sure it works before actually replacing the actual one. This will allow me to take my time to write it without interfering
			  with the existing code too much.
			  Lexer's new home will be the Parser folder (renamed to Parse?)
			> Make the Lexer & Parser tightly coupled. The Parser itself should call the Lexer to Lex a token. (no more storage in a vector)
				> This will require the Parser or Lexer to have a caching mechanism, and use "cached" token when backtracking is required.
				> the "createParserStateBackup" functions will be removed, and replaced with a call to the lexer similar to "lexer_.backtrack(x)"
			> Stop using a DFA. Use a proper grammar with a recursive descent technique
			  and a config file (.def) to register valid terminals (so it's easy to add new characters for another language)
			> Register separators in a .def file?

Performance:
	Diagnostics:
		1) The Diagnostic object is quite large (few hundred bytes), and, as it's nearly always a temporary object, this could maybe
		have a cost on performance. Tests needs to be done. If it has really a big cost on performance, store all the diagnostic's data
		inside the DiagnosticsEngine. For that, create a DiagnosticData object, store a vector of them in the DiagnosticEngine and
		make the Diagnostic object only store a pointer to the DiagnosticsEngine with the index of the DiagnosticsData object in the vector.

Features:
	LinearAllocator 
		Add a function to rollback the AllocPtr to a specific pointer, which would be
		used by the companion delete when a constructor has thrown.
		Also it could be a good idea to backup the latest AllocPtr to compare it with the rollback ptr! (assert that lastAllocPtr < rollbackPtr < allocPtr)
		(just in debug builds to do more checking)