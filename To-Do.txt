This file contains personal notes I take when writing the project, this is essentially a to-do list.
It isn't definitive, don't take anything listed here for granted. The stuff I write here changes a lot!
- Pierre

To-Do:
  > ASTUnit : Represents a source file, contains declarations. (Done)
  > IdentifierTable & IdentifierInfo (Done)
  > ASTContext (Done)
  > Move stuf to /Fox/Basic (Done)
  > ASTContext : Types (Done)
  > New type system & deletion of /Common/Types (Done!)
  > Replace strings in the AST by IdentifierInfo* pointers (Done)  
  > ParsingResult rework (Done)
  > AST Improvements (Done)
  > Add ASTContext,parser & ast support for arrays types & Array literals. (Done)
  > Parser recovery improvements (Done)
  > Parsing Result Rework (Again...) (Done)
  > DeclRecorder (Done)
  > Parser support for DeclRecorder with a RAIIContext object. (Done)
  > UniquePtrVector & DereferenceIterators + Minimizing interaction with unique pointers for AST Visitors(Done)
  > Major AST "Cleanup" in preparation for Visitor pattern rework (Done)
  > Write more Unit tests (Done)
  > Visitor system rework (Done)
  > Delete old ASTVisitor & Dumper  (Done)
  > Rewrite dumper under the new system  (Done)
  > Make "MapDataIterator" work (Done)
  > ASTDumper overhaul (Done)
  > Write tests for the new visitor system (I'll do more when needed)
  > Sourceloc & SourceManager system (Done)
  > Update lexer/token to add a sourcerange/loc to every single token (Done)
  > Update the Parser so it can return more SourceLoc info. (Done)
  > Update the AST so all nodes have a sourceloc/range too wherever needed. (Done)
  > Write Decl Locs Test (Done)
  > First AST Code Review (Done)
  > Remove "Fake" Recovery nodes in the AST and find a proper, better solution to this problem. (Done)
  > Update Diagnostics & DiagnosticsEngine to support SourceRange/SourceLoc (Done)
  > Namespace/Name change (Done)
  > Delete the ContepromoteSeverityIfNeededxt (Done)
  > Update Lexer to use the DiagnosticEngine (Done)
  > Update Parser to use DiagnosticEngine + ParserDiagnostics Rework (Done)  
  > SourceManager improvements : Line table & Renaming SourceManager.hpp/.cpp to Source.hpp/.cpp (Done)
  > Small code review (error handling checking) (Done)
  > Rename DeclRecorder to DeclContext.(Done)
  > Rework the DiagnosticEngine::report function (Done)
  > Add classof to AST Nodes (Done)
  > Replace dynamic_cast with llvm's dyn_cast (Done)
  > Compile without RTTI (Done)
  > Diagnostics Overhaul (Done)
  > Finish the LinearAllocator (Done)
  > AST: Allocator: Move from unique_ptrs to raw allocated pointers (Done)
  > AST: Divide the hierarchies (Done)
  > Review code of expr/stmt/decl/astnode (Done)
  > AST code review (again) (Done)
  > Finish the PtrVariant (Done)
  > parseFuncDecl refactoring (Done)
  > Minimize ExprVector copies in the ArrayLiteral & FuncCall exprs (Done)
  > Add custom return types for expr/decl/stmt/types for the ASTVisitor (Done)
  > Add "Extra Range" to Diagnostics (Done)
  > Add Type* to all exprs (Done)
  > Add LValueType (Done)
  > Add ValueDecl (Done)
  > Remove QualType (Done)
  > Update PrimitiveType (Done)
  > Begin basic Sema functions (Done)
  > Switch to library-based architecture, splitting includes & headers (Done)
  > ResultObject (Done)
  > ASTWalker (Done)
  > Add ErrorType (Done)
  > Bulk of the Type rework (Done)
  > Finish Type Rework/Solve last issues (Done)
  > Switching to ::create or ::get idiom for Types instead of creation through ASTContext (Done)
  > Constrained Types (Done)
  > Type toString rewrite (TypePrinter) (Done)
  > Constraint Printer (toString & toDebugString) (Done)
  > Type debug print (toDebugString) (Done)
  > Removing ParensExpr (Done)
  > ConstrainedType in Semantic Analysis (Done)
  > Fix Array Literal Inference (Done)
  > Add DiagnosticVerifier (Done)
  > Sema: Replacing ConstrainedType with CellType (Done)
  > Create better unwrapping functions to effectively unwrap types (Done)
  > Adding -werr for LIT test suite (Done)
  > Replace BuiltinType by BasicType (Done)
  > Properly use Type in place of TypeBase* (Done)
  > Refactoring - fixing bad terminology (Done)
  > Sema::typecheckExprOfType (Done)
  > Sema::isDowncast (Done)
  > Sema: Basic Exprs Type-Checking + tests (Done)
  > Sema: Basic Stmt checking + tests (Done)
  > Identifier & IdentifierTable rework (Done)
  > const correctness update: no more double getters for getters of pointers (Done)
  > UnitDecl rework (Done)
  > Add features to get a Lexical view of a DeclContext (Done)
  > Add ASTContext& to UnitDecl (Done)
  > Remove Empty constructors in AST nodes (Done)
  > Switch whole AST to ::create Idiom (Done)
  > FuncDecl is not a DeclContext anymore (Done)
  > Decl::Parent to represent declaration parents (Done)
  > Remove Parser::state + Cleanup Parser.hpp (Done)
  > (Parser) Implement grammar 0.14 in the (Done)
  > DeclContext Improvements: Lexical view is the default, Lookup Map generated on demand (Done)
  > Unqualified Lookup (Done)
  > Finish Decl Checking (Done)
  > Add an Identifier range for NamedDecls (Done)
  > UnitDecl is no longer a NamedDecl (Done)
  > ASTContext stores DiagnosticEngine& and SourceManager& (Done)
  > Update StmtChecker to correctly open scopes where appropriate (Done)

  > ASTDumper overhaul 
  > Fix how diagnostics print columns/line on multiple lines
    > For diags, only print "begline:begcol", not the full range.
  > Diagnostic: Try to remove isFileWide and use some bit packing here and there.

  > FunctionType
  > Name binding logic in visitUnresolvedDeclRefExpr
  > ReturnStmt checking
    > add LocalScope->getFuncDecl() (the first LocalScope should have a FuncDecl
      as parent, so use a PointerUnion<FuncDecl*, LocalScope*> for the parent)

  > Parser improvements
    Update parseFuncDecl/FuncDecl Ctor
    -> Before creating the return node, parse the FuncDecl up to it's return type.
    -> Store ParamDecls inside a vector "vParams"
    -> Create the FuncDecl with vParams as arg
    -> Iterate over vParams and set each element's parent
        to the newly created FuncDecl

  > ASTVerifier
      Debug tool that asserts that the AST is well formed. Used as a debug tool (will
      only be enabled in Debug builds)

  > UFCS
    > Parser additions (UnresolvedDotExpr)
    > Semantic Analysis

  > Overloads

  > IR
  > IRGen
  > VM

Other:
  > Allow cast expr chaining (update grammar & parser)
    This isn't really a commonly used feature, but I hate seeing errors just because I type
    "foo as bool as string"

  > When diagnosing a redecl, should I really print "first decl seen here" each time
    if the decl was redeclared multiple times?

  > Add idRange to VarDecl/ParamDecl to emit better diagnostics 
    (functions where that range should be used)
    SemaDecl.pp
    -> diagnoseInvalidParamRedecl

  > Spend some time refactoring the Parser. Write betters comment, fix style and
    coding standard issues.

  > Investigate how the parser handles recovery to a ';' in a stmt: should the statement handle it
    or should parseStmt handle it?
    > Also, for parseQualType, who should emit the errors? The caller or the callee? No both! Make
      a decision and stick to it.

Pending reworks:
  > Token class -> Currently, it's an abomination. Nuke it and re-do it.
  > Lexer