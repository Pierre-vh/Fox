Moonshot Project To-do List.
	> ASTUnit : Represents a source file, contains declarations. (Done)
	> IdentifierTable & IdentifierInfo (Done)
	> ASTContext (Done)
	> Move stuf to /Fox/Basic (Done)
	> ASTContext : Types (Done)
	> New type system & deletion of /Common/Types (Done!)
	> Replace strings in the AST by IdentifierInfo* pointers (Done)	
	> ParsingResult rework (Done)
	> AST Improvements (Done)
	> Add ASTContext,parser & ast support for arrays types & Array literals. (Done)
	> Parser recovery improvements (Done)
	> Parsing Result Rework (Again...) (Done)
	> DeclRecorder (Done)
	> Parser support for DeclRecorder with a RAIIContext object. (Done)
	> UniquePtrVector & DereferenceIterators + Minimizing interaction with unique pointers for AST Visitors(Done)
	> Major AST "Cleanup" in preparation for Visitor pattern rework (Done)
	> Write more Unit tests (Done)
	> Visitor system rework (Done)
	> Delete old ASTVisitor & Dumper  (Done)
	> Rewrite dumper under the new system	(Done)
	> Make "MapDataIterator" work (Done)
	> ASTDumper overhaul (Done)
	> Write tests for the new visitor system (I'll do more when needed)
	> Sourceloc & SourceManager system (Done)
	> Update lexer/token to add a sourcerange/loc to every single token (Done)
	> Update the Parser so it can return more SourceLoc info. (Done)
	> Update the AST so all nodes have a sourceloc/range too wherever needed. (Done)
	> Write Decl Locs Test (Done)
	> First AST Code Review (Done)
	> Remove "Fake" Recovery nodes in the AST and find a proper, better solution to this problem. (Done)
	> Update Diagnostics & DiagnosticsEngine to support SourceRange/SourceLoc (Done)
	> Namespace/Name change (Done)
	> Delete the ContepromoteSeverityIfNeededxt (Done)
	> Update Lexer to use the DiagnosticEngine (Done)
	> Update Parser to use DiagnosticEngine + ParserDiagnostics Rework (Done)	
	> SourceManager improvements : Line table & Renaming SourceManager.hpp/.cpp to Source.hpp/.cpp (Done)
	> Small code review (error handling checking) (Done)
	> Rename DeclRecorder to DeclContext.(Done)
	> Rework the DiagnosticEngine::report function (Done)
	> Add classof to AST Nodes (Done)
	> Replace dynamic_cast with llvm's dyn_cast (Done)
	> Compile without RTTI (Done)
	> Diagnostics Overhaul (Done)
	> Finish the LinearAllocator (Done)
	> AST: Allocator: Move from unique_ptrs to raw allocated pointers (Done)
	> AST: Divide the hierarchies (Done)
	> Review code of expr/stmt/decl/astnode (Done)

	> Finish the PtrVariant & Document it more

	> Add custom return types for expr/decl/stmt/types for the ASTVisitor 
	> Change from double SourceLoc to SourceRange for the AST loc info  (more space efficient)
	> Document Stmt.hpp & Decl.hpp like Expr.hpp

	> LinearAllocator update
		>	add a function to RollBack the AllocPtr to a specific void*, which would be
			used by the companion delete when a constructor has thrown. Also it could be a good
			idea to backup the latest AllocPtr to compare it with the rollback ptr! (assert that lastAllocPtr < rollbackPtr < allocPtr)

	> New Expr Nodes (will require some parser work)
		> UncheckedDotSyntaxExpr (#)
			-> Will capture the function call if there's one
		> Split DeclRef 
			> UnresolvedDeclRef (contains only a identifier info)
			> DeclRef (contains only a pointer to a decl)
			> UnresolvedOverloadSet (contains a vector of pointers to Decl*)
				> Can create one from a LookupResult? 

	> Types:
		> Type becomes TypeBase, and a new "Type" class is created
			> TypeBase -> Type Hierarchy
			> Type -> Observing pointer to a TypeBase
			Once that's done, add a Type object to Expr
		> ErrorType
			> Type representing an error.

	> Adopt a Documentation style and document all of the code with it thoroughly.
	  Probably use doxygen-style comments?

	> Semantic Analysis


					
