Moonshot Project To-do List.
	> ASTUnit : Represents a source file, contains declarations. (Done)
	> IdentifierTable & IdentifierInfo (Done)
	> ASTContext (Done)
	> Move stuf to /Fox/Basic (Done)
	> ASTContext : Types (Done)
	> New type system & deletion of /Common/Types (Done!)
	> Replace strings in the AST by IdentifierInfo* pointers (Done)	
	> ParsingResult rework (Done)
	> AST Improvements (Done)
	> Add ASTContext,parser & ast support for arrays types & Array literals. (Done)
	> Parser recovery improvements (Done)
	> Parsing Result Rework (Again...) (Done)
	> DeclRecorder (Done)
	> Parser support for DeclRecorder with a RAIIContext object. (Done)
	> UniquePtrVector & DereferenceIterators + Minimizing interaction with unique pointers for AST Visitors(Done)
	> Major AST "Cleanup" in preparation for Visitor pattern rework (Done)
	> Write more Unit tests (Done)
	> Visitor system rework (Done)
	> Delete old ASTVisitor & Dumper  (Done)
	> Rewrite dumper under the new system	(Done)
	> Make "MapDataIterator" work (Done)
	> ASTDumper overhaul (Done)
	> Write tests for the new visitor system (I'll do more when needed)
	> Sourceloc & SourceManager system (Done)
	> Update lexer/token to add a sourcerange/loc to every single token (Done)
	> Update the Parser so it can return more SourceLoc info. (Done)
	> Update the AST so all nodes have a sourceloc/range too wherever needed. (Done)
	> Write Decl Locs Test (Done)
	> First AST Code Review (Done)
	> Remove "Fake" Recovery nodes in the AST and find a proper, better solution to this problem. (Done)
	> Update Diagnostics & DiagnosticsEngine to support SourceRange/SourceLoc (Done)
	> Namespace/Name change (Done)
	> Delete the ContepromoteSeverityIfNeededxt (Done)
	> Update Lexer to use the DiagnosticEngine (Done)
	> Update Parser to use DiagnosticEngine + ParserDiagnostics Rework (Done)	
	> SourceManager improvements : Line table & Renaming SourceManager.hpp/.cpp to Source.hpp/.cpp (Done)
	> Small code review (error handling checking) (Done)
	> Rename DeclRecorder to DeclContext.(Done)
	> Rework the DiagnosticEngine::report function (Done)
	> Add classof to AST Nodes (Done)
	> Replace dynamic_cast with llvm's dyn_cast (Done)
	> Compile without RTTI (Done)
	> Diagnostics Overhaul (Done)
	> Finish the LinearAllocator (Done)
	> AST: Allocator: Move from unique_ptrs to raw allocated pointers (Done)
	> AST: Divide the hierarchies (Done)
	> Review code of expr/stmt/decl/astnode (Done)
	> AST code review (again) (Done)
	> Finish the PtrVariant (Done)
	> parseFuncDecl refactoring (Done)
	> Minimize ExprVector copies in the ArrayLiteral & FuncCall exprs (Done)
	> Add custom return types for expr/decl/stmt/types for the ASTVisitor (Done)
	> Add "Extra Range" to Diagnostics (Done)
	> Add Type* to all exprs (Done)
	> Add LValueType (Done)

	> Add "ValueDecl" class (derived from NamedDecl), which is essentially a 
	  variable declaration, generalized. It has a type attribute, as well as a "isConst" qualifier.

	> Remove QualType. 

	> Review uniqueness of types. It makes sense for some types, but maybe for others
	  it doesn't make that much sense at all? (Rethink the "getArrayTypeForType" function, especially)

	> Semantic Analysis
		Ideas (for Exprs)
			Phase 1: 
				Semantic Analysis & Unification where needed
			Phase 2:
				Applying types the exprs
					Wouldn't it be better to "attach" the type to the exprs
					directly and then do a 2nd verification pass?

					AST is verified in this phase 
					(checking that everything has been resolved, that the AST is well formed, etc)

Boring stuff that I must do when I have the time/motivation for it
	> Adopt a Documentation style (Doxygen) and document all the code with it

Shelved
	> Types/TypeBase rework: Necessity still to be determined.
		On one side, it could be great because it eliminates some pointers, and would make the addition of Sugared type infinitely easier.
		However, it would take time to do. I'll weight the pros and cons before making a decision. I still got time, at least until I begin
		Semantic Analysis

					
