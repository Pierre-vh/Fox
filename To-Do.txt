This file contains personal notes I take when writing the project, this is essentially a to-do list.
It isn't definitive, don't take anything listed here for granted. The stuff I write here changes a lot!
- Pierre

To-Do:
  > ASTUnit : Represents a source file, contains declarations. (Done)
  > IdentifierTable & IdentifierInfo (Done)
  > ASTContext (Done)
  > Move stuf to /Fox/Basic (Done)
  > ASTContext : Types (Done)
  > New type system & deletion of /Common/Types (Done!)
  > Replace strings in the AST by IdentifierInfo* pointers (Done)  
  > ParsingResult rework (Done)
  > AST Improvements (Done)
  > Add ASTContext,parser & ast support for arrays types & Array literals. (Done)
  > Parser recovery improvements (Done)
  > Parsing Result Rework (Again...) (Done)
  > DeclRecorder (Done)
  > Parser support for DeclRecorder with a RAIIContext object. (Done)
  > UniquePtrVector & DereferenceIterators + Minimizing interaction with unique pointers for AST Visitors(Done)
  > Major AST "Cleanup" in preparation for Visitor pattern rework (Done)
  > Write more Unit tests (Done)
  > Visitor system rework (Done)
  > Delete old ASTVisitor & Dumper  (Done)
  > Rewrite dumper under the new system  (Done)
  > Make "MapDataIterator" work (Done)
  > ASTDumper overhaul (Done)
  > Write tests for the new visitor system (I'll do more when needed)
  > Sourceloc & SourceManager system (Done)
  > Update lexer/token to add a sourcerange/loc to every single token (Done)
  > Update the Parser so it can return more SourceLoc info. (Done)
  > Update the AST so all nodes have a sourceloc/range too wherever needed. (Done)
  > Write Decl Locs Test (Done)
  > First AST Code Review (Done)
  > Remove "Fake" Recovery nodes in the AST and find a proper, better solution to this problem. (Done)
  > Update Diagnostics & DiagnosticsEngine to support SourceRange/SourceLoc (Done)
  > Namespace/Name change (Done)
  > Delete the ContepromoteSeverityIfNeededxt (Done)
  > Update Lexer to use the DiagnosticEngine (Done)
  > Update Parser to use DiagnosticEngine + ParserDiagnostics Rework (Done)  
  > SourceManager improvements : Line table & Renaming SourceManager.hpp/.cpp to Source.hpp/.cpp (Done)
  > Small code review (error handling checking) (Done)
  > Rename DeclRecorder to DeclContext.(Done)
  > Rework the DiagnosticEngine::report function (Done)
  > Add classof to AST Nodes (Done)
  > Replace dynamic_cast with llvm's dyn_cast (Done)
  > Compile without RTTI (Done)
  > Diagnostics Overhaul (Done)
  > Finish the LinearAllocator (Done)
  > AST: Allocator: Move from unique_ptrs to raw allocated pointers (Done)
  > AST: Divide the hierarchies (Done)
  > Review code of expr/stmt/decl/astnode (Done)
  > AST code review (again) (Done)
  > Finish the PtrVariant (Done)
  > parseFuncDecl refactoring (Done)
  > Minimize ExprVector copies in the ArrayLiteral & FuncCall exprs (Done)
  > Add custom return types for expr/decl/stmt/types for the ASTVisitor (Done)
  > Add "Extra Range" to Diagnostics (Done)
  > Add Type* to all exprs (Done)
  > Add LValueType (Done)
  > Add ValueDecl (Done)
  > Remove QualType (Done)
  > Update PrimitiveType (Done)
  > Begin basic Sema functions (Done)
  > Switch to library-based architecture, splitting includes & headers (Done)
  > ResultObject (Done)
  > ASTWalker (Done)
  > Add ErrorType (Done)
  > Bulk of the Type rework (Done)
  > Finish Type Rework/Solve last issues (Done)
  > Switching to ::create or ::get idiom for Types instead of creation through ASTContext (Done)
  > Constrained Types (Done)
  > Type toString rewrite (TypePrinter) (Done)
  > Constraint Printer (toString & toDebugString) (Done)
  > Type debug print (toDebugString) (Done)
  > Removing ParensExpr (Done)
  > ConstrainedType in Semantic Analysis (Done)
  > Fix Array Literal Inference (Done)
  > Add DiagnosticVerifier (Done)
  > Sema: Replacing ConstrainedType with CellType (Done)
  > Create better unwrapping functions to effectively unwrap types (Done)
  > Adding -werr for LIT test suite (Done)
  > Replace BuiltinType by BasicType (Done)
  > Properly use Type in place of TypeBase* (Done)
  > Refactoring - fixing bad terminology (Done)
  > Sema::typecheckExprOfType (Done)
  > Sema::isDowncast (Done)
  > Sema: Basic Exprs Type-Checking + tests (Done)
  > Sema: Basic Stmt checking + tests (Done)
  > Identifier & IdentifierTable rework (Done)
  > const correctness update: no more double getters for getters of pointers (Done)
  > UnitDecl rework (Done)
  > Add features to get a Lexical view of a DeclContext (Done)
  > Add ASTContext& to UnitDecl (Done)
  > Remove Empty constructors in AST nodes (Done)
  > Switch whole AST to ::create Idiom (Done)
  > FuncDecl is not a DeclContext anymore (Done)
  > Decl::Parent to represent declaration parents (Done)
  > Remove Parser::state + Cleanup Parser.hpp (Done)
  > (Parser) Implement grammar 0.14 in the (Done)
  > DeclContext Improvements: Lexical view is the default, Lookup Map generated on demand (Done)
  > Unqualified Lookup (Done)
  > Finish Decl Checking (Done)
  > Add an Identifier range for NamedDecls (Done)
  > UnitDecl is no longer a NamedDecl (Done)
  > ASTContext stores DiagnosticEngine& and SourceManager& (Done)
  > Update StmtChecker to correctly open scopes where appropriate (Done)
  > ASTDumper overhaul (Done)
  > Add an IdentifierRange to NamedDecls (Done)
  > Diagnostic/DiagnosticEngine code cleanup/review (Done)
  > AST ParamList (Done)
  > Not all AST Nodes are trivially destructible, creating memory leaks (Fixed)
  > Subscript works on String & Uninferred types (Done)
  > ASTContext cleanups test (Done)
  > Fix "couldn't infer type of this expression" cascading errors in ExprFinalizer (Done)
  > Proper SourceRange for UnitDecls (Done)
  > FunctionType + FunctionType tests (Done)
  > Name binding logic (Done)
  > Semantic analysis for using variable within their own initial value (Done)
  > CallExpr checking (Done)
  > ReturnStmt checking (Done)
  > Disable function types within arrays (Done)
  > Write tests for interaction of a FunctionType with other operations (Done)
  > Introduce and use "isWellFormed" in Sema (Done)
  > Drop the "Moonshot" name and only use "Fox" as the project name (Done) 
  > Booleans are not numeric types anymore (Done)
  > Switch Fox to full blown strong typing (Done)
  > Make the Type static factories return a Type instead of a TypeBase* (Done)
  > Add "AnyLiteralExpr" as a common base for LiteralExprs (Done)
  > Refactor "getRange" in Decl/Stmt/Expr (Done)
  > Make the Type getters return "Type" instead of pointers (Done)
  > Replace CellTypes with a proper "TypeVariableType" (Done)

  > Refactor checkNonEmptyArrayLiteralExpr. It can be heavily simplified
    since there's no "upranking" anymore. Once that's done, get rid of containsFreeTypeVariable

  > In Unify, when none of A and B TypeVariables have a subst, properly
    unify them instead of using a workaround. Don't forget to check for Cycles.

  > Allocate TypeVariableTypes in a separate allocator (allow placement new for
    that type!)
    Also, reset the pool & call resetTypeVariables after checking an expression.

  > ASTVerifier
      Asserts that the AST is well formed. Used as a debug tool (will only be enabled in Debug builds)

  > First version of:
    > IR
    > IRGen
      > Note: Don't do IRGen in verify mode
    > VM

  > UFCS
    > Parser additions (Remove MemberExpr, use UnresolvedDotExpr which resolves to a CallExpr)
    > Semantic Analysis.
      > Check for Args, no args -> diagnose (unimplemented feature)
      > If args, check like a normal function call (always UFCS since no objects/multifile for now)
      > Build a CallExpr once the function is resolved, if not, leave it unresolved and mark 
        it as being an error.

  > OVR (OVerload Resolution)

  > Ternary operator
    > You know it: "cond ? then : else"

  > Type aliases
    > e.g. "typealias foo = [[int]]"
    > Will have to introduce sugared & canonical types for this.

  > FFI
    > Foreign function interface = ability to call C++ functions in Fox code

Future:
  > Multifile support: It's coming, but the how is still to be decided
  > Structs/Objects

Diagnostics improvements:
  > When diagnosing a redecl, should I really print "first decl seen here" for each use?

Other:
  > Update how TypeBase stores it's properties. It should be more streamlined and easier
    to add new properties. Right now it's a bit of a pain! Adding a new property
    requires an update on every type!

  > Allocate temporary objects inside special pools of the ASTContext. e.g.
      -> TypeVariableTypes
      -> UnresolvedExprs

  > DiagnosticVerifier: Add a syntax to expect a diag multiple times, e.g. 'expect-error(3)@+1'
    -> Use it in tests\VerifyMode\Sema\Expr\call.fox

  > Fix warnings generated by -Wreorder on CLang

  > (When Sema is done) Re-create the wiki on GitHub and explain the semantics of Fox.

  > Add more AST tests like ASTTest.ExprFlags, which tests that flags works as intended in the AST

  > Simplify some AST constructors which are way too bloated and contain redundant information
    Examples:
    -> ParamDecl: Can deduce the full range with SourceRange(idRange.begin(), typeRange.end())
    -> FuncDecl: Range can be deduced using the body's end loc. 
                 Also, maybe it's a good idea to remove the "complete" ctor entirely, 
                 as it's never used anyways.

  > Improve clarity of ASTDump, especially for ValueDecl/DeclRefExpr dumps.
    Maybe even rewrite it completely.

  > Allow cast expr chaining (update grammar & parser)
    This isn't really a commonly used feature, but I hate seeing errors just because I type
    "foo as bool as string"

  > Investigate how the parser handles recovery to a ';' in a stmt: should the statement handle it
    or should parseStmt handle it?

  -> Improve recovery for top-level decls : stop recovery attempt at first let or func keyword
      if not inside a function body (create isParsingTopLevelCode() && beginsTopLevelDecl(token))

Pending reworks:
  > Token class -> Currently, it's an abomination. Nuke it and re-do it.
  > Lexer -> Same