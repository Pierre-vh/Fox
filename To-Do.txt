Moonshot Project To-do List.
	> ASTUnit : Represents a source file, contains declarations. (Done)
	> IdentifierTable & IdentifierInfo (Done)
	> ASTContext (Done)
	> Move stuf to /Fox/Basic (Done)
	> ASTContext : Types (Done)
	> New type system & deletion of /Common/Types (Done!)
	> Replace strings in the AST by IdentifierInfo* pointers (Done)	
	> ParsingResult rework (Done)
	> AST Improvements (Done)
	> Add ASTContext,parser & ast support for arrays types & Array literals. (Done)
	> Parser recovery improvements part 1(Done)
	> Parser recovery improvements part 2 (Done)
	> Parser recovery improvements part 3 : Reworked it entirely again! (Done)
	> Parsing Result Rework & Parser Improvements Part 4 : Final part (Done)
	> Create a "DeclarationRecorder", which is a wrapper around a std::multimap<IdentifierInfo*,ASTNamedDecl*> (Done)
	> Parser support for DeclRecorder with a RAIIContext object. (Done)
	> UniquePtrVector & DereferenceIterators + Minimizing interaction with unique pointers for AST Visitors(Done)
	> Major AST "Cleanup" in preparation for Visitor pattern rework (Done)
	> Write more Unit tests (Done)
	> Visitor system rework (Done)
	> Delete old ASTVisitor & Dumper  (Done)
	> Rewrite dumper under the new system	(Done)
	> Make "MapDataIterator" work (Done)
	> ASTDumper overhaul (Done)
	> Write tests for the new visitor system (I'll do more when needed)
	> Sourceloc & SourceManager system (Done)
	> Update lexer/token to add a sourcerange/loc to every single token (Done)
	> Update the Parser so it can return more SourceLoc info. (Done)
	> Update the AST so all nodes have a sourceloc/range too wherever needed. (Done)
	> Write Decl Locs Test (Done)
	> First AST Code Review (Done)
	> Remove "Fake" Recovery nodes in the AST and find a proper, better solution to this problem. (Done)
	> Update Diagnostics & DiagnosticsEngine to support SourceRange/SourceLoc (Done)
	> Namespace/Name change (Done)
	> Delete the Context (Done)
	> Update Lexer to use the DiagnosticEngine (Done)
	> Update Parser to use DiagnosticEngine + ParserDiagnostics Rework (Done)	

	> Small update to SourceManager:
		Rename SourceManager.hpp/.cpp to Source.hpp/.cpp
		Rework the PreciseLoc algorithm : cache a "line table" and use it
			> std::map would work, just use the lower_bound to find the line and that's it.
		Also, add a method to return a full line of text for a given SourceLoc "getSourceLine"

	> Write the Remaining tests needed:
		> Write Stmt & Expr Loc Tests
			> Try to cover most cases shortly, maybe 2 or 3 max test per node.
			> Probably don't use a file, just do SetUp("<code goes here>"")w
		> classof tests
		> SourceManager "getSourceLine" test

	// Move to 0.3.0 & Sync with Master
	QOL:
		> Implement the "Caret" 
			>	The DiagnosticConsumer should always try to retrieve the line where the error happened, displaying '^^^^' under the place wherethe error is.
				> Implement that in the DiagnosticConsumer class in a protected function that the derived classes can use. (e.g. "getOriginalSourceLine(SourceLoc)")

		> Add classof static methods to the AST (will be useful for testing if a class is a derived/base of without dynamic_cast)

		> Add a "Casting.h" file with wrappers around dynamic_cast, and utility functions that takes advantage of "classof"
			> dyn_cast -> wrapper around dynamic_cast.
				>  It's just going to be a wrapper at first so I don't have headaches trying to re-implement dynamic_cast myself
			> isa -> use llvm's impl as a guide
				> I'll implement this right now because it'll let me take advantage of the classof methods & the kind system in general.
			> Other idea : Use LLVM's and place it in Third-Party. I'll have to modify it a bit to make it standalone but at least I'll get an efficient version!
				> if I do it, compile RTTI-less.

	FEATURE:
		> Semantic Analysis
			> ASTValidator
			> Semantic Analysis should check for each node it's validity using the ASTValidator.
		      a typical Sema function should look like this for almost every node. The  proper analysis is then done by the Decl/Stmt/Expr checker.
			  (e.g. for a Decl) 
			  if(!Validator.visit(node))
				{
					diagnoseIncompleteDecl(node);
					return;
				}
			  
			  DeclChecker.visit(node);

		> Lexer Rework (Exact time to be decided, might come before/after Semantic Analysis)
			> Make the Lexer & Parser tightly coupled. The Parser itself should call the Lexer to Lex a token. (no more storage in a vector)
				> This will require the Parser or Lexer to have a caching mechanism, and use "cached" token when backtracking is required.
				> the "createParserStateBackup" functions will be removed, and replaced with a call to the lexer similar to "lexer_.backtrack(x)"
			> Stop using a DFA. Use a proper grammar with a recursive descent technique
			  and a config file (.def) to register valid terminals
					
