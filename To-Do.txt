Moonshot Project To-do List.
	> ASTUnit : Represents a source file, contains declarations. (Done)
	> IdentifierTable & IdentifierInfo (Done)
	> ASTContext (Done)
	> Move stuf to /Fox/Basic (Done)
	> ASTContext : Types (Done)
	> New type system & deletion of /Common/Types (Done!)
	> Replace strings in the AST by IdentifierInfo* pointers (Done)	
	> ParsingResult rework (Done)
	> AST Improvements (Done)
	> Add ASTContext,parser & ast support for arrays types & Array literals. (Done)
	> Parser recovery improvements (Done)
	> Parsing Result Rework (Again...) (Done)
	> DeclRecorder (Done)
	> Parser support for DeclRecorder with a RAIIContext object. (Done)
	> UniquePtrVector & DereferenceIterators + Minimizing interaction with unique pointers for AST Visitors(Done)
	> Major AST "Cleanup" in preparation for Visitor pattern rework (Done)
	> Write more Unit tests (Done)
	> Visitor system rework (Done)
	> Delete old ASTVisitor & Dumper  (Done)
	> Rewrite dumper under the new system	(Done)
	> Make "MapDataIterator" work (Done)
	> ASTDumper overhaul (Done)
	> Write tests for the new visitor system (I'll do more when needed)
	> Sourceloc & SourceManager system (Done)
	> Update lexer/token to add a sourcerange/loc to every single token (Done)
	> Update the Parser so it can return more SourceLoc info. (Done)
	> Update the AST so all nodes have a sourceloc/range too wherever needed. (Done)
	> Write Decl Locs Test (Done)
	> First AST Code Review (Done)
	> Remove "Fake" Recovery nodes in the AST and find a proper, better solution to this problem. (Done)
	> Update Diagnostics & DiagnosticsEngine to support SourceRange/SourceLoc (Done)
	> Namespace/Name change (Done)
	> Delete the ContepromoteSeverityIfNeededxt (Done)
	> Update Lexer to use the DiagnosticEngine (Done)
	> Update Parser to use DiagnosticEngine + ParserDiagnostics Rework (Done)	
	> SourceManager improvements : Line table & Renaming SourceManager.hpp/.cpp to Source.hpp/.cpp (Done)
	> Small code review (error handling checking) (Done)
	> Rename DeclRecorder to DeclContext.(Done)
	> Rework the DiagnosticEngine::report function (Done)
	> Add classof to AST Nodes (Done)
	> Replace dynamic_cast with llvm's dyn_cast (Done)
	> Compile without RTTI (Done)
	> Diagnostics Overhaul (Done)
	> Finish the LinearAllocator (Done)

	> AST Rework:
		1) Allocator: Move from unique_ptrs to raw allocated pointers
			1) ASTContext's operator new
				> Write it & test it
			2) Allocate the expr/stmt/decls with new(ASTcontext) ...
			3) Allocate the types using ::get, which gets the unique version of the type from the context (all types should be friend with the ASTContext)
		2) Restructure the AST:
			a) Divide the hierarchies: Expr/Stmt/Types/Decls should be distinct, use a PtrVariant for the "ASTNode" type
				a) Visitor "rework" (polishing, adding custom return types for every hierarchy)
			b) Expr: 
				a) UncheckedDotSyntaxExpr
					-> Captures the () if there's one
					-> Can resolve in a function call (UFCS) or a MemberAccess expr
				b) UnresolvedDeclRef?
					-> transforms to a DeclRef or "UnresolvedOverloadSet"
			c) Types:
				a) Type -> TypeBase + Type object, which is a observing "smart" pointer to a Type
					Note: this is to be decided, I don't know yet if I'll keep the Type*. This would be done I case I add sugared types, and to 
					abstract the pointer-ness a bit.
				b) ErrorType
			

	> Semantic Analysis
		(ideas, see if it's actually needed + follow personal notes for structure)
		> FunctionType
		> OverloadType

					
