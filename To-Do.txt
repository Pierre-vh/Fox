This file contains personal notes I take when writing the project, this is essentially a to-do list.
It isn't definitive, don't take anything listed here for granted. The stuff I write here changes a lot!
- Pierre

To-Do:
  > ASTUnit : Represents a source file, contains declarations. (Done)
  > IdentifierTable & IdentifierInfo (Done)
  > ASTContext (Done)
  > Move stuf to /Fox/Basic (Done)
  > ASTContext : Types (Done)
  > New type system & deletion of /Common/Types (Done!)
  > Replace strings in the AST by IdentifierInfo* pointers (Done)  
  > ParsingResult rework (Done)
  > AST Improvements (Done)
  > Add ASTContext,parser & ast support for arrays types & Array literals. (Done)
  > Parser recovery improvements (Done)
  > Parsing Result Rework (Again...) (Done)
  > DeclRecorder (Done)
  > Parser support for DeclRecorder with a RAIIContext object. (Done)
  > UniquePtrVector & DereferenceIterators + Minimizing interaction with unique pointers for AST Visitors(Done)
  > Major AST "Cleanup" in preparation for Visitor pattern rework (Done)
  > Write more Unit tests (Done)
  > Visitor system rework (Done)
  > Delete old ASTVisitor & Dumper  (Done)
  > Rewrite dumper under the new system  (Done)
  > Make "MapDataIterator" work (Done)
  > ASTDumper overhaul (Done)
  > Write tests for the new visitor system (I'll do more when needed)
  > Sourceloc & SourceManager system (Done)
  > Update lexer/token to add a sourcerange/loc to every single token (Done)
  > Update the Parser so it can return more SourceLoc info. (Done)
  > Update the AST so all nodes have a sourceloc/range too wherever needed. (Done)
  > Write Decl Locs Test (Done)
  > First AST Code Review (Done)
  > Remove "Fake" Recovery nodes in the AST and find a proper, better solution to this problem. (Done)
  > Update Diagnostics & DiagnosticsEngine to support SourceRange/SourceLoc (Done)
  > Namespace/Name change (Done)
  > Delete the ContepromoteSeverityIfNeededxt (Done)
  > Update Lexer to use the DiagnosticEngine (Done)
  > Update Parser to use DiagnosticEngine + ParserDiagnostics Rework (Done)  
  > SourceManager improvements : Line table & Renaming SourceManager.hpp/.cpp to Source.hpp/.cpp (Done)
  > Small code review (error handling checking) (Done)
  > Rename DeclRecorder to DeclContext.(Done)
  > Rework the DiagnosticEngine::report function (Done)
  > Add classof to AST Nodes (Done)
  > Replace dynamic_cast with llvm's dyn_cast (Done)
  > Compile without RTTI (Done)
  > Diagnostics Overhaul (Done)
  > Finish the LinearAllocator (Done)
  > AST: Allocator: Move from unique_ptrs to raw allocated pointers (Done)
  > AST: Divide the hierarchies (Done)
  > Review code of expr/stmt/decl/astnode (Done)
  > AST code review (again) (Done)
  > Finish the PtrVariant (Done)
  > parseFuncDecl refactoring (Done)
  > Minimize ExprVector copies in the ArrayLiteral & FuncCall exprs (Done)
  > Add custom return types for expr/decl/stmt/types for the ASTVisitor (Done)
  > Add "Extra Range" to Diagnostics (Done)
  > Add Type* to all exprs (Done)
  > Add LValueType (Done)
  > Add ValueDecl (Done)
  > Remove QualType (Done)
  > Update PrimitiveType (Done)
  > Begin basic Sema functions (Done)
  > Switch to library-based architecture, splitting includes & headers (Done)
  > ResultObject (Done)
  > ASTWalker (Done)
  > Add ErrorType (Done)
  > Bulk of the Type rework (Done)
  > Finish Type Rework/Solve last issues (Done)
  > Switching to ::create or ::get idiom for Types instead of creation through ASTContext (Done)
  > Constrained Types (Done)
  > Type toString rewrite (TypePrinter) (Done)
  > Constraint Printer (toString & toDebugString) (Done)
  > Type debug print (toDebugString) (Done)
  > Removing ParensExpr (Done)
  > ConstrainedType in Semantic Analysis (Done)
  > Fix Array Literal Inference (Done)
  > Add DiagnosticVerifier (Done)
  > Sema: Replacing ConstrainedType with CellType (Done)
  > Create better unwrapping functions to effectively unwrap types (Done)
  > Adding -werr for LIT test suite (Done)
  > Replace BuiltinType by BasicType (Done)
  > Properly use Type in place of TypeBase* (Done)
  > Refactoring - fixing bad terminology (Done)
  > Sema::typecheckExprOfType (Done)
  > Sema::isDowncast (Done)
  > Sema: Basic Exprs Type-Checking + tests (Done)
  > Sema: Basic Stmt checking + tests (Done)
  > Identifier & IdentifierTable rework (Done)
  > const correctness update: no more double getters for getters of pointers (Done)
  > UnitDecl rework (Done)
  > Add features to get a Lexical view of a DeclContext (Done)
  > Add ASTContext& to UnitDecl (Done)
  > Remove Empty constructors in AST nodes (Done)
  > Switch whole AST to ::create Idiom (Done)
  > FuncDecl is not a DeclContext anymore (Done)
  > Decl::Parent to represent declaration parents (Done)
  > Remove Parser::state + Cleanup Parser.hpp (Done)
  > (Parser) Implement grammar 0.14 in the (Done)
  > DeclContext Improvements: Lexical view is the default, Lookup Map generated on demand (Done)
  > Unqualified Lookup (Done)
  > Finish Decl Checking (Done)
  > Add an Identifier range for NamedDecls (Done)
  > UnitDecl is no longer a NamedDecl (Done)
  > ASTContext stores DiagnosticEngine& and SourceManager& (Done)
  > Update StmtChecker to correctly open scopes where appropriate (Done)
  > ASTDumper overhaul (Done)
  > Add an IdentifierRange to NamedDecls (Done)
  > Diagnostic/DiagnosticEngine code cleanup/review (Done)
  > AST ParamList (Done)
  > Not all AST Nodes are trivially destructible, creating memory leaks (Fixed)
  > Subscript works on String & Uninferred types (Done)
  > ASTContext cleanups test (Done)
  > Fix "couldn't infer type of this expression" cascading errors in ExprFinalizer (Done)
  > Proper SourceRange for UnitDecls (Done)
  > FunctionType + FunctionType tests (Done)
  > Name binding logic (Done)
  > Semantic analysis for using variable within their own initial value (Done)
  > CallExpr checking (Done)
  > ReturnStmt checking (Done)
  > Disable function types within arrays (Done)
  > Write tests for interaction of a FunctionType with other operations (Done)
  > Introduce and use "isWellFormed" in Sema (Done)
  > Drop the "Moonshot" name and only use "Fox" as the project name (Done) 
  > Booleans are not numeric types anymore (Done)
  > Switch Fox to full blown strong typing (Done)
  > Make the Type static factories return a Type instead of a TypeBase* (Done)
  > Add "AnyLiteralExpr" as a common base for LiteralExprs (Done)
  > Refactor "getRange" in Decl/Stmt/Expr (Done)
  > Make the Type getters return "Type" instead of pointers (Done)
  > Replace CellTypes with a proper "TypeVariableType" (Done)
  > SourceManager rework/cleanup (Done)
  > TypeLoc update (Done)
  > Parser result object rework (Done)
  > Split DeclContext into DeclContext and LookupContext (Done)
  > FuncDecl is a DeclContext again + Simplify the Decl Parent logic (Done)
  > Split SourceLoc & SourceManager headers (Done)
  > SourceManager interface improvements (Done)
  > DiagnosticEngine interface improvements (Done)
  > LinearAllocator overhaul (Done)
  > DeclContext - LookupContext merged + interface improvement/rework (Done)
  > UTF8 Handling improvements (Done)
  > Add local lookups in DeclContext (Done)
  > Remove LocalScope
  > Rename getBegin/getEnd/getRange to getBeginLoc/getEndLoc/getSourceRange (Done)

  > Polish the DeclContext changes : maybe? Ideas:
      a) Split lookupmap implementation depending on if it needs
           ScopeInfo or not, so not all DeclContext pay the price of
           storing the ScopeInfo if they don't need it
      b) Generalize RAII objects in the parser once and for all, maybe by
         using llvm:SaveAndRestore
      d) Improve/review
          DelayedDeclRegistration 
          actOnDecl           | Theses 2 methods are pretty similar, rename them to
          doDeclRegistration  | better differentiate them


  > VM
  > IR
  > IRGen

  > UFCS
    > Parser additions (Remove MemberExpr, use UnresolvedDotExpr which resolves to a CallExpr)
    > Semantic Analysis.
      > Check for Args, no args -> diagnose (unimplemented feature)
      > If args, check like a normal function call (always UFCS since no objects/multifile for now)
      > Build a CallExpr once the function is resolved, if not, leave it unresolved and mark 
        it as being an error.

  > Overloads support

  > FFI and some intrinsics
    > Foreign function interface = ability to call C++ functions in Fox code
    > Intrinsics = some "builtin" foreign function available in any fox code.

  > Ternary operator

  > Multifile support:
    > Exact model still to be decided. It'll probably be package/module based, but probably
      not to the extreme of java (with less nesting).

  > Function types & Functions as first class citizens

  > Type aliases
    > e.g. "typealias foo = [[int]]"
    > Will have to introduce sugared & canonical types for this.

Future:
  > Multifile support: It's coming, but the how is still to be decided
  > Structs/Objects

Other:
  Maybe someday: 
    This is a list of things that I don't know/I'm not sure yet how I'll fix.

    > Const-correctness in the AST
      > I'd need to decide on a strict const-correctness policy and stick to it. 
        Right now I'm using const getters when returning pointers everytime except in some
        specific cases, but it kind of feels wrong. I'd need to adopt a stricter/cleaner
        policy, but the only "stricter" policy that I can think of is always returning
        a const pointers when having const getters, but this feels too strict IMO.

  High priority:
    This is a list of "high-priority" stuff that needs to be done, but isn't part of the main
    "roadmap".

    > DiagnosticEngine overhaul: report(..) should return a Diagnostic::Builder object:
      a lightweight RAII object. The actual Diagnostic data should be contained
      inside the DiagnosticEngine. This avoids the large temporary object that is the
      current Diagnostic object.  

    > ASTVerifier
      Asserts that the AST is well formed. Used as a debug tool (will only be enabled in Debug builds)

    > Multiple allocator kids in the ASTContext: Perma (for the permanent AST nodes), 
      Unresolveds (for unresolved AST nodes) and Sema (for Semantic analysis type variables)
      Sema pools are created and managed by Sema using a RAII object. Unresolveds pool
      is always there and can be reset separately from the Perma pool at any moment. 

      Arena struct:
        Type maps
        The allocator
        Cleanups
        
  Medium priority:
    This is a list of "medium-priority" stuff that needs to be done.
  
    > Rework StringManipulator into an iterator

    > Completely abstract-away the utfcpp library (create a wrapper (e.g. Common/UTF8.hpp))
      so I can change the library used in the future without too much hassle.

    > Lexer & Token rewrite + Parser rework.

    > Add a "RAIIIgnoreAll" object to ignore all diagnostics temporarily, and
      remove setIgnoreAll(value) (replace by ignoreAll() returning RAIIIgnoreAll)

    > DiagnosticVerifier: Add a syntax to expect a diag multiple times, e.g. 'expect-error(3)@+1'
      -> Use it in tests\VerifyMode\Sema\Expr\call.fox

    > Improve clarity of ASTDump, especially for ValueDecl/DeclRefExpr dumps.
      Maybe even rewrite it completely.

    > Investigate how the parser handles recovery to a ';' in a stmt: should the statement handle it
      or should parseStmt handle it?

    > Improve recovery for top-level decls : stop recovery attempt at first let or func keyword
        if not inside a function body (create isParsingTopLevelCode() && beginsTopLevelDecl(token))

  Low priority:
    This is a list of "low-priority" stuff that needs to be done.

    > Add proper unicode support for StreamDiagConsumer's caret line, and re-enable it for
      every source line (even those with non ASCII char).
        For that, use utf8proc: https://github.com/JuliaStrings/utf8proc

    > Fix warnings generated by -Wreorder on CLang

    > (When Sema is done) Re-create the wiki on GitHub and explain the semantics of Fox.

    > Add more AST tests like ASTTest.ExprFlags, which tests that flags works as intended in the AST

    > Allow cast expr chaining (update grammar & parser)
      This isn't really a commonly used feature, but I hate seeing errors just because I type
      "foo as bool as string"
