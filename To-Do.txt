This file contains personal notes I take when writing the project, this is essentially a to-do list.
It isn't definitive, don't take anything listed here for granted. The stuff I write here changes a lot!
- Pierre

To-Do:
  > ASTUnit : Represents a source file, contains declarations. (Done)
  > IdentifierTable & IdentifierInfo (Done)
  > ASTContext (Done)
  > Move stuf to /Fox/Basic (Done)
  > ASTContext : Types (Done)
  > New type system & deletion of /Common/Types (Done!)
  > Replace strings in the AST by IdentifierInfo* pointers (Done)  
  > ParsingResult rework (Done)
  > AST Improvements (Done)
  > Add ASTContext,parser & ast support for arrays types & Array literals. (Done)
  > Parser recovery improvements (Done)
  > Parsing Result Rework (Again...) (Done)
  > DeclRecorder (Done)
  > Parser support for DeclRecorder with a RAIIContext object. (Done)
  > UniquePtrVector & DereferenceIterators + Minimizing interaction with unique pointers for AST Visitors(Done)
  > Major AST "Cleanup" in preparation for Visitor pattern rework (Done)
  > Write more Unit tests (Done)
  > Visitor system rework (Done)
  > Delete old ASTVisitor & Dumper  (Done)
  > Rewrite dumper under the new system  (Done)
  > Make "MapDataIterator" work (Done)
  > ASTDumper overhaul (Done)
  > Write tests for the new visitor system (I'll do more when needed)
  > Sourceloc & SourceManager system (Done)
  > Update lexer/token to add a sourcerange/loc to every single token (Done)
  > Update the Parser so it can return more SourceLoc info. (Done)
  > Update the AST so all nodes have a sourceloc/range too wherever needed. (Done)
  > Write Decl Locs Test (Done)
  > First AST Code Review (Done)
  > Remove "Fake" Recovery nodes in the AST and find a proper, better solution to this problem. (Done)
  > Update Diagnostics & DiagnosticsEngine to support SourceRange/SourceLoc (Done)
  > Namespace/Name change (Done)
  > Delete the ContepromoteSeverityIfNeededxt (Done)
  > Update Lexer to use the DiagnosticEngine (Done)
  > Update Parser to use DiagnosticEngine + ParserDiagnostics Rework (Done)  
  > SourceManager improvements : Line table & Renaming SourceManager.hpp/.cpp to Source.hpp/.cpp (Done)
  > Small code review (error handling checking) (Done)
  > Rename DeclRecorder to DeclContext.(Done)
  > Rework the DiagnosticEngine::report function (Done)
  > Add classof to AST Nodes (Done)
  > Replace dynamic_cast with llvm's dyn_cast (Done)
  > Compile without RTTI (Done)
  > Diagnostics Overhaul (Done)
  > Finish the LinearAllocator (Done)
  > AST: Allocator: Move from unique_ptrs to raw allocated pointers (Done)
  > AST: Divide the hierarchies (Done)
  > Review code of expr/stmt/decl/astnode (Done)
  > AST code review (again) (Done)
  > Finish the PtrVariant (Done)
  > parseFuncDecl refactoring (Done)
  > Minimize ExprVector copies in the ArrayLiteral & FuncCall exprs (Done)
  > Add custom return types for expr/decl/stmt/types for the ASTVisitor (Done)
  > Add "Extra Range" to Diagnostics (Done)
  > Add Type* to all exprs (Done)
  > Add LValueType (Done)
  > Add ValueDecl (Done)
  > Remove QualType (Done)
  > Update PrimitiveType (Done)
  > Begin basic Sema functions (Done)
  > Switch to library-based architecture, splitting includes & headers (Done)
  > ResultObject (Done)
  > ASTWalker (Done)
  > Add ErrorType (Done)
  > Bulk of the Type rework (Done)
  > Finish Type Rework/Solve last issues (Done)
  > Switching to ::create or ::get idiom for Types instead of creation through ASTContext (Done)
  > Constrained Types (Done)
  > Type toString rewrite (TypePrinter) (Done)
  > Constraint Printer (toString & toDebugString) (Done)
  > Type debug print (toDebugString) (Done)
  > Removing ParensExpr (Done)
  > ConstrainedType in Semantic Analysis (Done)
  > Fix Array Literal Inference (Done)
  > Add DiagnosticVerifier (Done)

  > For tests, make warnings errors.
    > Add CL option for it
  > Write a Verify mode/testing tool and test current semantics
  > Finish basic expr semantic analysis

  > Code review in SemaType/SemaExpr & Write tests using new FTT tool


Order of semantic analysis
  > Stmt Semantic Analysis
  > Decl Semantic Analysis
  > Name Resolution (DeclRefs of vars)
  > Overload Resolution (Name resolution for memberExprs & DeclRefs of funcs)
    > UFCS
      > UnresolvedDoExpr

Boring stuff that I must do when I have the time/motivation for it
  > Adopt a Documentation style (Doxygen) and document all the code with it

  > AST Serialization tool for unit tests

  > Investigate how the parser handles recovery to a ';' in a stmt: should the statement handle it
    or should parseStmt handle it?

Pending reworks:
  > Token class -> Currently, it's an abomination. Nuke it and re-do it.
  > Lexer/Parser -> Storing stuff in a vector is useless. Just allow the parser to call the lexer directly and
    retrieve tokens on the fly. More memory efficient, faster, etc.
