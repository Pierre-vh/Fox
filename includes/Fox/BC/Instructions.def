//----------------------------------------------------------------------------//
// This file is part of the Fox project.        
// See the LICENSE.txt file at the root of the project for license information.            
// File : Instructions.def                      
// Author : Pierre van Houtryve                
//----------------------------------------------------------------------------//
//  Macros for macro-metaprogramming with the Fox VM instruction set.
//----------------------------------------------------------------------------//

// Represents an "untyped" instruction. We don't know anything about it,
// just its ID. All subsequent macros simplify to INSTR when they aren't defined,
// so you can just define "INSTR" and know the ID of every instruction without
// having to define all of the instruction macros.
#ifndef INSTR
  #define INSTR(ID)
#endif

// The last instruction in the file.
#ifndef LAST_INSTR
  #define LAST_INSTR(ID)
#endif

// A simple, trivial instruction that doesn't take any argument.
#ifndef SIMPLE_INSTR
  #define SIMPLE_INSTR(ID) INSTR(ID)
#endif

// A ternary instruction is an instruction that takes three arguments.
// (three 8 bits values)
#ifndef TERNARY_INSTR
  #define TERNARY_INSTR(ID, T1, T2, T3) INSTR(ID)
#endif

// A binary instruction is an instruction that takes two arguments.
#ifndef BINARY_INSTR
  #define BINARY_INSTR(ID, T1, T2) INSTR(ID)
#endif

// A unary instruction is an instruction that takes only one argument.
#ifndef UNARY_INSTR
  #define UNARY_INSTR(ID, T1) INSTR(ID)
#endif

// A "TAC" instruction stands for three address code instruction. It's
// an instruction that takes 3 addresses (3 registers) as
// operands: a destination (arg0), a lhs (arg1) and a rhs (arg2).
#ifndef TAC_INSTR
  #define TAC_INSTR(ID) TERNARY_INSTR(ID, regaddr_t, regaddr_t, regaddr_t)
#endif

//----------------------------------------------------------------------------//

SIMPLE_INSTR(NoOp)
SIMPLE_INSTR(Break)

// Stores D (a signed 16 bit int) in register A
BINARY_INSTR(StoreSmallInt, regaddr_t, std::int16_t)

// Arithmetic : a = b (op) c. Result's type is the type of the operand.
TAC_INSTR(AddInt)     // Int Addition
TAC_INSTR(AddDouble)  // Double Addition
TAC_INSTR(SubInt)     // Int Substraction
TAC_INSTR(SubDouble)  // Double Substraction
TAC_INSTR(MulInt)     // Int Multiplication
TAC_INSTR(MulDouble)  // Double Multiplication
TAC_INSTR(DivInt)     // Int Division
TAC_INSTR(DivDouble)  // Double Division
TAC_INSTR(ModInt)     // Int Modulo
TAC_INSTR(ModDouble)  // Double Modulo
TAC_INSTR(PowInt)     // Int exponentiation
TAC_INSTR(PowDouble)  // Double exponentiation
BINARY_INSTR(NegInt, regaddr_t, regaddr_t)    // Int unary minus
BINARY_INSTR(NegDouble, regaddr_t, regaddr_t) // Double unary minus

// Comparisons a = b (cond) c. Result is always an int (1 for true, 0 for false)
TAC_INSTR(EqInt)      // Int Equality
TAC_INSTR(LEInt)      // Int Less or Equal
TAC_INSTR(LTInt)      // Int Less Than (Is it needed?)
TAC_INSTR(EqDouble)   // Double Equality
TAC_INSTR(LEDouble)   // Double Less or Equal
TAC_INSTR(LTDouble)   // Double Less Than
TAC_INSTR(GEDouble)   // Double Greater or Equal
TAC_INSTR(GTDouble)   // Double Greater Than

// Other arithmetic/logic ops that operate on raw values
TAC_INSTR(LAnd)   // Logical AND
TAC_INSTR(LOr)    // Logical OR
BINARY_INSTR(LNot, regaddr_t, regaddr_t) // Logical NOT

// Jumps
BINARY_INSTR(CondJump, regaddr_t, std::int16_t)  // Conditional Jump : Jump iff register != 0
UNARY_INSTR(Jump, std::int16_t)                  // Unconditional Jump

// Casts
BINARY_INSTR(IntToDouble, regaddr_t, regaddr_t) // Converts an int to a double
BINARY_INSTR(DoubleToInt, regaddr_t, regaddr_t) // Converts a double to an int

LAST_INSTR(Jump)

//----------------------------------------------------------------------------//

#undef INSTR
#undef SIMPLE_INSTR
#undef TERNARY_INSTR
#undef BINARY_INSTR
#undef UNARY_INSTR
#undef TAC_INSTR
#undef LAST_INSTR