//----------------------------------------------------------------------------//
// This file is part of the Fox project.        
// See the LICENSE.txt file at the root of the project for license information.            
// File : Instruction.def                      
// Author : Pierre van Houtryve                
//----------------------------------------------------------------------------//
//  Macros for macro-metaprogramming with Fox Bytecode Instructions.
//----------------------------------------------------------------------------//

// Represents an "untyped" instruction. We don't know anything about it,
// just its ID. All subsequent macros simplify to INSTR when they aren't defined,
// so you can just define "INSTR" and know the ID of every instruction without
// having to define all of the instruction macros.
#ifndef INSTR
  #define INSTR(ID)
#endif

// The last instruction in the file.
#ifndef LAST_INSTR
  #define LAST_INSTR(ID)
#endif

// A simple, trivial instruction that doesn't take any argument.
#ifndef SIMPLE_INSTR
  #define SIMPLE_INSTR(ID) INSTR(ID)
#endif

// A ternary instruction is an instruction that takes three arguments.
// (three 8 bits values)
#ifndef TERNARY_INSTR
  #define TERNARY_INSTR(ID, I1, T1, I2, T2, I3, T3) INSTR(ID)
#endif

// A binary instruction is an instruction that takes two arguments.
#ifndef BINARY_INSTR
  #define BINARY_INSTR(ID, I1, T1, I2, T2) INSTR(ID)
#endif

// A unary instruction is an instruction that takes only one argument.
#ifndef UNARY_INSTR
  #define UNARY_INSTR(ID, I1, T1) INSTR(ID)
#endif

// A "binary" operation on registers, with 2 operands and a destination.
#ifndef BINARY_REG_OP
  #define BINARY_REG_OP(ID)\
    TERNARY_INSTR(ID, dest, regaddr_t, lhs, regaddr_t, rhs, regaddr_t)
#endif

// A "unary" operation on registers, with a single operand and a destination.
#ifndef UNARY_REG_OP
  #define UNARY_REG_OP(ID) BINARY_INSTR(ID, dest, regaddr_t, src, regaddr_t)
#endif

//----------------------------------------------------------------------------//

SIMPLE_INSTR(NoOp)

// Storing & Loading Values
  // Stores value (a signed 16 bit int) in register dest
BINARY_INSTR(StoreSmallInt, dest, regaddr_t, value, std::int16_t)
  // dest = src
UNARY_REG_OP(Copy)
  // Loads the integer constant identified by 'kID' into the register 'dest'
BINARY_INSTR(LoadIntK, dest, regaddr_t, kID, constant_id_t)
  // Loads the double constant identified by 'kID' into the register 'dest'
BINARY_INSTR(LoadDoubleK, dest, regaddr_t, kID, constant_id_t)

// Arithmetic : dest = lhs (op) rhs. Result's type is the type of the operand.
BINARY_REG_OP(AddInt)    // Int Addition
BINARY_REG_OP(AddDouble) // Double Addition
BINARY_REG_OP(SubInt)    // Int Substraction
BINARY_REG_OP(SubDouble) // Double Substraction
BINARY_REG_OP(MulInt)    // Int Multiplication
BINARY_REG_OP(MulDouble) // Double Multiplication
BINARY_REG_OP(DivInt)    // Int Division
BINARY_REG_OP(DivDouble) // Double Division
BINARY_REG_OP(ModInt)    // Int Modulo
BINARY_REG_OP(ModDouble) // Double Modulo
BINARY_REG_OP(PowInt)    // Int exponentiation
BINARY_REG_OP(PowDouble) // Double exponentiation
UNARY_REG_OP(NegInt)     // Int unary minus
UNARY_REG_OP(NegDouble)  // Double unary minus

// Comparisons a = b (cond) c. Result is always an int (1 for true, 0 for false)
BINARY_REG_OP(EqInt)      // Int Equality
BINARY_REG_OP(LEInt)      // Int Less or Equal
BINARY_REG_OP(LTInt)      // Int Less Than (Is it needed?)
BINARY_REG_OP(EqDouble)   // Double Equality
BINARY_REG_OP(LEDouble)   // Double Less or Equal
BINARY_REG_OP(LTDouble)   // Double Less Than
BINARY_REG_OP(GEDouble)   // Double Greater or Equal
BINARY_REG_OP(GTDouble)   // Double Greater Than

// Other arithmetic/logic ops that operate on raw values
BINARY_REG_OP(LAnd) // Logical AND
BINARY_REG_OP(LOr)  // Logical OR
UNARY_REG_OP(LNot)  // Logical NOT

// Jumps
//    Conditional "If" Jump : Jump iff condReg != 0
BINARY_INSTR(JumpIf, condReg, regaddr_t, offset, jump_offset_t)
//    Conditional "If Not" Jump : Jump iff condReg == 0
BINARY_INSTR(JumpIfNot, condReg, regaddr_t, offset, jump_offset_t)
//    Unconditional Jump
UNARY_INSTR(Jump, offset, jump_offset_t)

// Casts
UNARY_REG_OP(IntToDouble) // Converts an int to a double
UNARY_REG_OP(DoubleToInt) // Converts a double to an int

SIMPLE_INSTR(RetVoid)
UNARY_INSTR(Ret, reg, regaddr_t)

// Stores a reference to a function 'func' in register 'dest'
BINARY_INSTR(LoadFunc, dest, regaddr_t, func, func_id_t)
// Calls a function in register 'base' and places the return value in 'dest'
BINARY_INSTR(Call, base, regaddr_t, dest, regaddr_t) 
// Calls a function in register 'base' and discards the return value
UNARY_INSTR(CallVoid, base, regaddr_t) 

LAST_INSTR(Ret)

//----------------------------------------------------------------------------//

#undef INSTR
#undef SIMPLE_INSTR
#undef TERNARY_INSTR
#undef BINARY_INSTR
#undef UNARY_INSTR
#undef BINARY_REG_OP
#undef UNARY_REG_OP
#undef LAST_INSTR