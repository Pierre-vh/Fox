//----------------------------------------------------------------------------//
// Part of the Fox project, licensed under the MIT license.
// See LICENSE.txt in the project root for license information.     
// File : Driver.hpp                      
// Author : Pierre van Houtryve                
//----------------------------------------------------------------------------//
// Contains the Fox Driver.
//----------------------------------------------------------------------------//

#pragma once

#include "Fox/Common/DiagnosticEngine.hpp"
#include "Fox/Common/SourceManager.hpp"
#include "Fox/Common/string_view.hpp"
#include <iosfwd>

namespace fox {
  class BCModule;
  class ASTContext;
  /// The driver class for the Fox interpreter.
  class Driver {
    public:
      Driver(std::ostream& out);

      Driver(const Driver&) = delete;
      Driver& operator=(const Driver&) = delete;

      /// Processes a single file
      /// \param filepath the path to the file
      /// \returns true if the file was processed successfully, false otherwise
      bool processFile(string_view path);

      /// Entry point for starting the driver from the command-line.
      /// \return 0 on success, 1 on error.
      int main(int argc, char* argv[]);

      struct Options {
        /// Whether 'verification' mode is enabled
        bool verifyMode     = false;
        /// Whether each stage of the interpretation process should be
        /// timed.
        bool timeStages     = false;
        /// Whether ASTContext's allocator stats should be printed
        bool dumpASTAllocator = false;
        /// Whether the AST should be printed
        bool dumpAST        = false;
        /// Whether the generated bytecode should be printed.
        /// NOTE: Even if run = false, BCGen will still be performed (but
        /// the resulting bytecode will not be evaluated)
        bool dumpBCGen      = false;
        /// Whether the interpretation process should stop after parsing.
        bool parseOnly      = false;
        /// Whether lexed tokens should be printed
        bool dumpTokens     = false;
        /// Whether the input should be run using the VM.
        bool run            = false;
      };

      /// Driver options
      Options options;

      /// The ostream to which diagnostics and messages will be sent.
      std::ostream& out;

      SourceManager sourceMgr;
      DiagnosticEngine diagEngine;

    private:
      /// Tries to load a file into the SourceManager, and emits
      /// and error if it couldn't be opened.
      /// \returns an invalid FileID on error.
      FileID tryLoadFile(string_view file);

      /// \returns true if we must generate the bytecode
      bool needsToGenerateBytecode() const;

      /// Tries to run \p theModule
      /// \p ctxt and \p mainFile are needed to diagnose the lack of
      /// an entry point in the module.
      bool run(ASTContext& ctxt, FileID mainFile, BCModule& theModule);
  };
}
