Work on this part of the project has just started, so expect the BC, BCGen and VM parts
to be incomplete for a bit of time. 

Basic VM data types and their mappings to Fox types:
    Fox       VM
    int       int
    double    double
    bool      int
    char      int
    string    TBA
    []        TBA

---- Initial Preparation and Scaffolding ---- DONE ----
  -> Opcode (Done)
  -> InstructionBuilder (Done)
  -> VM Scaffolding: Registers data structure, basic methods such as run() (Done)

---- Implementation of Int/Double/Bool and related functionalities ---- DONE ----
  -> Implement basic binary operations on integers and doubles: + - * / % (Done)
  -> Implement comparisons & logic operators (Done)

---- Implementation of control flow ---- DONE ----
  -> Declare opcodes (Done)
  -> Implement (Done)
  -> Test (Done)

---- Implementation of casting opcodes ----
  -> Declare opcodes (Done)
  -> Implement (Done)
  -> Test (Done)

---- Implementation of basic CodeGen ----
  -> Scaffolding (Done)
  -> InstructionBuilder's buffer can be taken (Done)
  -> Bytecode Dumper (Done)
  -> RegisterAllocator & RegisterValue (Done)
  -> Basic CodeGen of simple integral expressions (only ints, bool and char) (Done)
  -> VMModule (Done)
  -> Scaffoldign of BCGen entry points (Done)
  -> Codegen of local variables (Done)
  -> Code review in Register.hpp/.cpp and BCGenDecl (Done)
  -> BCModule::instr_iterator (Done)
  -> BCBuilder Update (Done)
  -> Add index when dumping instructions, e.g. [42] StoreSmallInt 3 50 (Done)

  -> CodeGen of Statements
      -> Conditions (Done)
      -> Loops
        -> Don't forget to "protect" the liveliness of variables declared outside the loop.
           I'll need a "RegisterAllocator::LoopContext" to prevent variable declared outside a loop from dying inside it.

  -> Destination register for ExprGenerator: Require a destination register for an expression. If present, the result
     must be stored there. Will be used for calling functions. Just pass an extra "RegisterValue" as parameter, maybe
     even an "Optional<RegisterValue>" one to make optionality obvious.

  -> Constants & Constant Table
    -> "Constant" object ?
    -> BCModule 
    -> BCGen 
    -> Instructions + VM

  -> Implement the rest of ExprGenerator
    -> Double & Double operations
    -> Assignements (AssignExprGenerator)

  -> Codegen of functions
    -> Don't forget to add support of ParamDecl/References to ParamDecl in RegisterAllocator 
       and FuncGenPrologue.

---- Implementation of Object types ----
  Note: At first, objects won't be freed. I'll use a leak-forever allocator (LinearAllocator).
    GC will come later when the language is officially "feature-complete", because writing a good, reliable
    GC takes time and I'll probably write a better one with the full design of the language implemented.

  -> Common "Object" base
  -> ArrayObject: Always dynamically sized, essentially just a SmallVector (will maybe even inherit from it). Has a "isReference" flag.
  -> Strings: Similar to ArrayObject. I think they'll also be dynamically sized, but that's subject to change.
 
  Note: In the future, I'll probably have a UserObject and a TupleObject.
        UserObject for structs, TupleObject for tuples.

---- Getting feature-complete (with the current feature set) ----
  -> Codegen of global variables
  -> Function calls
  -> Intrinsics/FFI
  -> Basic debug information & trivial exception system (for proper error management).
  -> Properly diagnose maximum register pressure exceeded:
    > When the RegisterAllocator runs out of registers, it should call a handler (a BCGen method?)
      that will emit a diagnostic when possible, or at least tell something like
      "ran out of registers while compiling function 'foo'"
      "note: when compiling this <expr/decl/stmt>" <last stmt/expr/decl compiled>
  -> Test/Document as much as possible.

---- Implementing the GC ----
  (Current ideas, highly subject to changes)
  -> "ReferenceMap" (Safe points) to track register that contain references if I decide to do a precise GC.
    -> Implemented in the RegisterAllocator. I'll just need an extra arg to "allocateTemporary" like "RegisterPurpose" to track
       registers holding refs. When a register dies, the corresponding bit is cleared. Import/use llvm::BitVector for that!
  -> Basic GC algorithm: mark and sweep, colored object. Non-generational/non-compacting at first. 
      (I'll try to get decent perf without compacting/generational and then only think about the rest)

---- Other To-Dos ----
  -> Implement a Sethi-Ullman -like algorithm to decide the evaluation order
      of subexpressions (to make regalloc a bit more efficient)

  -> Potentially add a way of skipping 'useless' expressions on a case-by-case
      basis. 
      e.g. don't compile a 'Unary Not -> Unary Not -> Expr', just compile expr.
      I need to see if there's more of them and if it'd be worthwhile to implement such 
      a feature.

  -> Add a RegisterAllocator enableLogging option to emit logs about 
      register allocation, such as "Assignated Register X to Var 'foo' 0xABCDEF"
      or, upon death, emit the total of registers used, something like that.
      Add a "-log-regalloc" option and use write FileCheck tests based on that option.

  -> Properly diagnose out of range jumps in BCGen::StmtGenerator::calculateJumpOffset