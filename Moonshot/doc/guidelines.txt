Guidelines :

Required : 
-> Every declaration in a header should be within the Moonshot namespace. You need to put your whole class code in a namespace Moonshot {}

Tips :
-> You can use "using namespace Moonshot;" in .cpp files to make the code less verbose in implementation.
-> when it's possible, add a small comment when using #include to tell the reader why you include the file 
	e.g. #include <iostream> // std::cout,std::cerr,..
-> Use smart pointer whenever possible. The only exception is when you use a singleton.

MACROS :
	-> all uppercase.

VARIABLES
-> Normal variables names should be all lowercase, with a underscore between words.
	e.g. my_variable
-> Attributes should be named like "normal" variable, but with a trailing underscore. example : "foo_";
	e.g. my_variable_;
-> Constant variables should use "mixed case" with a k as first character
	e.g. const int kPi = 3.14;

CLASSES
-> Class names should begin with a capital letter.
	e.g. Foo

FUNCTIONS
-> Function names must begin with a lowercase letter and use "mixed case". Exception can be made for functions variations
	e.g. addTwoNumbers();
		 addTwoNumbers_float();
-> when possible, use constant reference when you don't need to modify an argument to avoid useless memory copies.

ERROR REPORTING
-> Either use the Macros in src/Moonshot/Common/Errors.h to report your errors
	or retrieve the instance of Moonshot::Errors and put it in a member variable to call the functions.
-> reportWarning should be used for small errors that don't stop the parsing process
-> reportError should be used to report errors that can happen "normally", if the user does something wrong, etc.
-> reportCritical should be used ONLY for "grave" errors that shouldn't happen in normal use.

LOGGING
-> To log something (give information to the user like "Parsing Done", etc..) use E_LOG(".."); or use the method logInfo() in src/Moonshot/Common/Errors.cpp

IDENTATION
-> Keep it as clear as possible. I personnaly add one "tab" of identation after I open a curly bracket "{" and remove one when i close it "}". I also add one tab after "public:" or "private" or "case:", etc..
-> Also, I suggest that you put a blank line to separate function groups. 
	e.g.
			void reportWarning(const char *file, int line, const std::string &txt);	
			void reportWarning(const std::string &txt);	// Warnings

			void reportError(const char *file, int line, const std::string &txt);	
			
			void reportCritical(const char *file, int line, const std::string &txt);
