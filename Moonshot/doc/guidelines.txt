Coding style guidelines.

GENERAL TIPS
-> You can use "using namespace Moonshot;" in .cpp files to make the code less verbose in implementation.
-> when it's possible, add a small comment when using #include to tell the reader why you include the file 
	e.g. #include <iostream> // std::cout,std::cerr,..
-> Use smart pointer whenever possible. The only exception is when you use a singleton.
-> Avoid really long lines whenever possible. Split them ! :)

NAMING 
-> MACROS : all uppercase;
-> NORMAL VARIABLES : should be all lowercase, with a underscore between words.
	e.g. my_variable
-> ATTRIBUTES should be named like "normal" variable, but with a trailing underscore. example : "foo_"; (Except in option structures, see later.)
	EXCEPTION : Public attributes should be named like normal variables.
	e.g. my_variable_;
-> CONSTANTS should use "mixed case" with a k as first character
	e.g. const int kPi = 3.14;
-> CLASSES names should begin with a capital letter.
	e.g. Foo
-> FUNCTIONS names must begin with a lowercase letter and use "mixed case". Exception can be made for functions variations
	e.g. addTwoNumbers();
		 addTwoNumbers_float();
-> ENUMERATIONS. Keep them all lowercase, you can use an underscore to separate words, but it's not mandatory.

NAMESPACES
-> Every class/struct/... should be inside the "Moonshot" namespace. You can use "using namespace Moonshot;" in your implementation to make the code less verbose. 
-> Avoid other "using namespace" statements, unless it's really needed to make the code less verbose (don't forget to use stuff like auto and make macros to avoid doing it ! :p)
-> You can create new namespaces if you need to declare a  lot of structs and such that need to be used only by one class or two. (like in src/Moonshot/Fox/Lexer/Token.hpp)

MACROS :
-> use them to avoid really long, verbose lines.
	e.g. #define E_WARNING(y)	Moonshot::Errors::getInstance()->reportWarning(__FILE__,__LINE__,y);
		Macros like this make the code more readable, but avoid over using them. Also, don't put a semicolon at the end of a macro if it's not a full statement. (Here I used one, because it's a full statement)	

FUNCTIONS

-> when possible, use constant reference when you don't need to modify an argument to avoid useless memory copies.

ERROR REPORTING
-> Use the context's function to report errors.
-> reportWarning should be used for small errors that don't stop the parsing process
-> reportError should be used to report errors that can happen "normally", if the user does something wrong, etc.
-> reportFatal should be used for grave, fatal errors

LOGGING
-> To log something (give information to the user like "Parsing Done", etc..) use E_LOG(".."); or use the method logInfo() in src/Moonshot/Common/Errors.cpp

IDENTATION
-> Keep it as clear as possible. I personnaly add one "tab" of identation after I open a curly bracket "{" and remove one when i close it "}". I also add one tab after "public:" or "private" or "case:", etc..
-> Also, I suggest that you put a blank line to separate function groups. 
	e.g.
			void reportWarning(const char *file, int line, const std::string &txt);	
			void reportWarning(const std::string &txt);	// Warnings

			void reportError(const char *file, int line, const std::string &txt);	
			
			void reportCritical(const char *file, int line, const std::string &txt);

COMMENTS
-> Please use comments when declaring a function in a .hpp file. Keep it short and straight to the point. Add more detailed comment in the implementation if needed.
-> When you declare special classes ,like a uncopyable class or a singleton, it's great to tell us just before the class definition like so :
	// SINGLETON
	class Errors 
	{
		...
	}

ENUMERATIONS
-> Use all caps for enum values. also, try to use a prefix. (see src/Moonshot/Fox/Lexer/Token.hpp)
