func fizzbuzz() 
{
	let count : int;
	while(count <= 100)
	{
		if(count % 3 == 0)
			print("Fizz");
		if(count % 5 == 0)
			print("Buzz");
		if((count % 3 == 0) && (count % 5 ==0))
			print(count);
		count = count+1;
	}
}

Bytecode translation example:

0	declfunc 0					// 0 is the function index in the globals table
1		.meta	"fizzbuzz"		// .meta tag for "fizzbuzz"
2		decllocal	0		
3		.meta	"count"
// while part
4		loadloc	0
5		const	100
6		cmp_leq		// TOS2 less or equal (<=) TOS1
7		cond_jump	39	// Jump
// while body: first if
8		loadloc 0
9		const 3
10		mod
11		const	0
12		cmp_eq
13		cond_jump 4	// goes to 13+2 = 15 if false
14		loadext 0	// load external function 0 (print)
15		const "fizz"
16		callf 1	// calls a function with 1 arg. 1 arg is pop'd + the func ref (loadext)
// while body : second if
17		loadloc 0
18		const 3
19		mod
20		const 0
21		cmp_eq
22		cond_jump 4
23		loadext 0
24		const "buzz"
25		callf 1
// while body :third if
26		loadloc 0
27		const 3
28		mod
29		const 0	
30		cmp_eq
31		loadloc 0
32		const 5
33		mod
34		const 0
35		cmp_eq
36		and
37		cond_jump 4
38		loadext 0
39		const "fizzbuzz"
40		callf 1
// increment
41		loadloc 0
42		const 1
43		add
44		storeloc 0
// end of loop
45		goto 4
46		return	// return from function, pop frame, add return value to main stack (here, none, so nothing is added)
