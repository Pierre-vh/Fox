Feature name:
	Expression Functions

Motivation:
	Bring a way of interacting with basic data types in an easy and comprehensible way.

Grammar:
	It needs to support expressions on literals, callables and complete expressions and be of the highest precedence.
	AND it needs to support chaining.

	This should work:
	<values> {'.' <id> <expr_list>} (0+)

Where it would fit in the current grammar:
	<value>         = <callable> | <literal> | '(' <expr> ')' 
	<expr_func>		= <value> {'.' <id> <expr_list> }
	<exp_expr>      = <expr_func> [ <exponent_operator> <prefix_exp> ]
	<prefix_expr>   = <unary_operator> <prefix_expr> | <exp_expr>
	<cast_expr>     = <prefix_expr> [<as_kw> <type]
	<binary_expr>   = <cast_expr> { <binary_operator> <cast_expr> }	
	<expr>          = <binary_expr> [assign_operator> <expr>] 
	
	
Example of use
	"Foo bar".substr(0,3).toChar(0); // Does a substring on "Foo bar", returning "Foo", then converts the first char (index 0) to a char.

Implementation:
	This is still a WIP, but here's the base idea.
		Expression Function Declaration:
		[data:int] toString() 
		{
			return (data as string);
		}
