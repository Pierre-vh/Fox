//----------------------------------------------------------------------------//
// This file is a part of The Moonshot Project.        
// See the LICENSE.txt file at the root of the project for license information.            
// File : LocParserTests.cpp                      
// Author : Pierre van Houtryve                
//----------------------------------------------------------------------------//
//  Tests for the accuracy of Locations/Ranges of nodes generated by the Parser.
//----------------------------------------------------------------------------//

#include "gtest/gtest.h"
#include "Fox/Lexer/Lexer.hpp"
#include "Fox/Parser/Parser.hpp"
#include "Fox/Common/Source.hpp"
#include "Fox/Common/DiagnosticEngine.hpp"
#include "Fox/AST/ASTContext.hpp"
#include "Fox/AST/Identifier.hpp"
#include "Support/TestUtils.hpp"

using namespace fox;

// Parser Preparator for LocTests
class LocTests : public ::testing::Test {
  public:
    LocTests() : dg(srcMgr), declContext(DeclContextKind::UnitDecl) {

    }
  protected:
    virtual void SetUp(const std::string& filepath)  {
      fullFilePath = test::getPath(filepath);
      file = srcMgr.loadFromFile(fullFilePath);

      // If file couldn't be loaded, give us the reason
      if (!file) {
        FAIL() << "Couldn't load file \""<< filepath << "\" in memory.";
      }

      lexer = std::make_unique<Lexer>(dg, srcMgr, astContext);
      lexer->lexFile(file);

      if (dg.getErrorsCount()) {
        FAIL() << "Lexing Error";
      }

      parser = std::make_unique<Parser>(dg, srcMgr , astContext, lexer->getTokenVector(), &declContext);
      ok = true;
    }

    std::string fullFilePath;
    
    bool ok = false;
    DiagnosticEngine dg;
    FileID file;
    SourceManager srcMgr;
    ASTContext astContext;
    DeclContext declContext;
    std::unique_ptr<Lexer> lexer;
    std::unique_ptr<Parser> parser;
};

TEST_F(LocTests, FuncAndArgDecl) {
  SetUp("parser/loc/functions.fox");
  ASSERT_TRUE(ok) << "Initialization failed";
  auto presult = parser->parseFuncDecl();
  ASSERT_TRUE(presult) << "parsing error";

  auto func = presult.getAs<FuncDecl>();
  auto funcRange = func->getRange();
  // First, test the function itself
  CompleteLoc func_beg = srcMgr.getCompleteLoc(funcRange.getBegin());
  CompleteLoc func_head_end = srcMgr.getCompleteLoc(func->getHeaderEndLoc());
  CompleteLoc func_end = srcMgr.getCompleteLoc(funcRange.getEnd());
  
  EXPECT_EQ(func_beg, CompleteLoc(fullFilePath, 1, 1));
  EXPECT_EQ(func_head_end, CompleteLoc(fullFilePath, 1, 55));
  EXPECT_EQ(func_end, CompleteLoc(fullFilePath, 4, 3));

  // Now, test the args
  // Arg count should be correct
  ASSERT_EQ(func->getNumParams(), 2);

  // Extract each arg individually
  ParamDecl* arg1 = func->getParam(0);
  ParamDecl* arg2 = func->getParam(1);

  // Check if the names are right
  EXPECT_EQ(arg1->getIdentifier().getStr(), "_bar1");
  EXPECT_EQ(arg2->getIdentifier().getStr(), "_bar2");

  // Extract Arg locs
  #define BEG_LOC(x) srcMgr.getCompleteLoc(x->getRange().getBegin())
  #define END_LOC(x) srcMgr.getCompleteLoc(x->getRange().getEnd())
  
  auto arg1_beg = BEG_LOC(arg1);
  auto arg1_end = END_LOC(arg1);

  auto arg2_beg = BEG_LOC(arg2);
  auto arg2_end = END_LOC(arg2);

  #undef BEG_LOC
  #undef END_LOC

  EXPECT_EQ(arg1_beg, CompleteLoc(fullFilePath,1,10));
  EXPECT_EQ(arg1_end, CompleteLoc(fullFilePath,1,30));

  EXPECT_EQ(arg2_beg, CompleteLoc(fullFilePath, 1, 33));
  EXPECT_EQ(arg2_end, CompleteLoc(fullFilePath, 1, 44));

  // Extract arg type ranges
  auto arg1_typeRange = arg1->getTypeRange();
  auto arg2_typeRange = arg2->getTypeRange();

  // Extract locs
  auto arg1_tr_beg = srcMgr.getCompleteLoc(arg1_typeRange.getBegin());
  auto arg2_tr_beg = srcMgr.getCompleteLoc(arg2_typeRange.getBegin());

  // Check
  EXPECT_EQ(arg1_typeRange.getEnd(), arg1->getRange().getEnd());
  EXPECT_EQ(arg2_typeRange.getEnd(), arg2->getRange().getEnd());

  EXPECT_EQ(arg1_tr_beg, CompleteLoc(fullFilePath, 1, 26));
  EXPECT_EQ(arg2_tr_beg, CompleteLoc(fullFilePath, 1, 40));
}

// VarDecl test
TEST_F(LocTests, VarDecls) {
  SetUp("parser/loc/vardecl.fox");
  ASSERT_TRUE(ok) << "Initialization failed";
  auto presult = parser->parseVarDecl();
  ASSERT_TRUE(presult) << "parsing error";

  auto var = presult.getAs<VarDecl>();
  CompleteLoc var_beg = srcMgr.getCompleteLoc(var->getRange().getBegin());
  CompleteLoc var_end = srcMgr.getCompleteLoc(var->getRange().getEnd());

  EXPECT_EQ(var_beg, CompleteLoc(fullFilePath,1,3));
  EXPECT_EQ(var_end, CompleteLoc(fullFilePath,1,22));

  CompleteLoc var_ty_beg = srcMgr.getCompleteLoc(var->getTypeRange().getBegin());
  CompleteLoc var_ty_end = srcMgr.getCompleteLoc(var->getTypeRange().getEnd());

  EXPECT_EQ(var_ty_beg, CompleteLoc(fullFilePath, 1, 11));
  EXPECT_EQ(var_ty_end, CompleteLoc(fullFilePath, 1, 15));

  auto range = var->getInitExpr()->getRange();
  CompleteLoc expr_beg = srcMgr.getCompleteLoc(range.getBegin());
  CompleteLoc expr_end = srcMgr.getCompleteLoc(range.getEnd());

  EXPECT_EQ(expr_beg, CompleteLoc(fullFilePath, 1, 19));
  EXPECT_EQ(expr_end, CompleteLoc(fullFilePath, 1, 21));
}