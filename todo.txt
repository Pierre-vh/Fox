Moonshot Project To-do List.
	> ASTUnit : Represents a source file, contains declarations. (Done)
	> IdentifierTable & IdentifierInfo (Done)
	> ASTContext (Done)
	> Move stuf to /Fox/Basic (Done)
	> ASTContext : Types (Done)
	> New type system & deletion of /Common/Types (Done!)
	> Replace strings in the AST by IdentifierInfo* pointers (Done)	
	> ParsingResult rework (Done)
	> AST Improvements (Done)
	> Add ASTContext,parser & ast support for arrays types & Array literals. (Done)
	> Parser recovery improvements part 1(Done)
	> Parser recovery improvements part 2 (Done)
	> Parser recovery improvements part 3 : Reworked it entirely again! (Done)
	> Parsing Result Rework & Parser Improvements Part 4 : Final part (Done)
	> Create a "DeclarationRecorder", which is a wrapper around a std::multimap<IdentifierInfo*,ASTNamedDecl*> (Done)
	> Parser support for DeclRecorder with a RAIIContext object. (Done)
	> UniquePtrVector & DereferenceIterators + Minimizing interaction with unique pointers for AST Visitors(Done)
	> Major AST "Cleanup" in preparation for Visitor pattern rework (Done)
	> Write more Unit tests (Done)
	> Visitor system rework (Done)
	> Delete old ASTVisitor & Dumper  (Done)
	> Rewrite dumper under the new system	(Done)
	> Make "MapDataIterator" work (Done)
	> Do some polish on ASTDumper. Right now the dump is a bit rough to read, maybe try to make it prettier, or let the user enable/disable some informations? (Done? Will come back to that from time to time)
	> Write tests for the new visitor system (I'll do more when needed)
	> Sourceloc & SourceManager system (Done)
		
	Up next:
		> Update lexer/token to add a sourcerange/loc to every single token
		> Update the AST so all nodes have a sourceloc/range too ! Do not hesitate to be precise. The more information there is, the better the error messages!

	> Update Diagnostics & DiagnosticsEngine to support a sourceloc/sourcerange arg.
	> Maybe spend some time completely hiding away the unique_ptr for everyone except the Parser (even there, remove make_uniques and replace with "CreateNode" object, avoid unique_ptr and just use "auto node = createNode<BinaryExpr>()"...
	  UniquePtrs are implementation details and shouldn't be seen by other classes. If one day I replace them by raw pointers + arena allocator, it shouldn't be a complete pain in the ass.

	> Write all the remaining tests needed.

	> Move all of my current diagnostics message to the new system.
	> Delete the context's system primitive diag system.

	// Move to 0.3.0

	> Semantic Analysis time ! It's going to be fun (or not :) ) !

