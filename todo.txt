Disclaimer:
This file contains a short term, rapidly changing road map. Essentially, if I need to get something done tomorrow, I'll write it here.
Theses can be considered personal notes, and you shouldn't consider what's in this file as a true roadmap.

-> Context & DiagEngine revamp, Clang-like system
	-> DiagEngine, DiagConsumers, Diagnostic pieces
	-> use a .def to register new diagnostics and a DiagnosticKind enum

-> Add a FlagsManager class	(DONE, it's Flags.hpp, and it's just a class)
	-> Improve it by using an enum and isSet,Set and unSet functions to make the thing nicer to use.
		e.g 
			context.getFoxFlags().lexerIsDumb // BAD
			context.flags().isSet(FoxFlags::lexerIsDumb) // Looks better, I think? But it's more verbose..
			// I still need to think about what's the best thing to do.

-> AST Revamp
	-> New visitor system
	-> New ASTContext & Type nodes
		-> Finish refactor in /Common/types

-> Do a "polish pass" after all this code's done, meaning : Write unit tests, rewrite dirty code, find other stuff to fix

-> Move on to Semantic analysis : Sema & Name resolution.

-> Consider adding multiple source files support at this point, while doing so, plan the codegen phase and set on a final vm : Register or Stack based? Opcodes? etc.