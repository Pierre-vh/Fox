// Main test for the lexer : this test should always pass
// Note that this isn't semantically or syntaxically correct, it's just to test some edge cases and try to break the lexer.
using Fox.io;     // Import this package, and use its namespace
using Fox0.io; // test to distinguish float from char
using Fox0.math;
func fib(n : &int) : int 
{
  if (n<=2)
    {
            return 1;
        }
  else 
        {
            return fib(n-1) + fib (n-2);
        }
  3.14.asInt(); // Example of expression function that's complex to parse/lex.
  "Hello".substr(0,2).pop_back().toChar(0);
}

func main()                                                                         // Here, main is void, but you can specify it
{
  print("Enter a number :");
  let __testing__escape__char__ : const string = "\xAE\n\r\"\\\\";        // testing escape sequence system robustness
  let n : int = input("int");                               // Fox.io.input is std::cin or scanf-like. It returns the value that was entered in the type specified 
  print("The " + n + "th fib term is : " + fib(n));                               // Fox.io.print is std::cout or printf-like (write to standard output)
    let math : int = 4*2/23**4 as float || -4.313323245;             // random expression
  exit(1);                                                                        // Default function to terminate the script's execution. (Needs to be added to the symbols table by default.)
}

/* 
  THIS IS A LARGE COMMENT !
*/