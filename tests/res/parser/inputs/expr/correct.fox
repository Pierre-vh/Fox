# Theses tests are just meant to test the expression parsing, and try to torture the parser. THEY ARE NOT SEMANTICALLY CORRECT, ONLY GRAMMATICALLY.
# random binops
"it " + ( "really " + "works ") + ((("it's wonderful"))) == "it really works it's wonderful"
"В тумане спрятанного солнца," == "В тумане спрятанного солнца,"
10%3 == 1 && 10**5 >= 10**4
4*-3 % 5**6 ==15613
(4**-1**-1**4*(4**2**2**2))/2**16==16384 
((((22)/(7))==(3.14285714)))
(2**64)>(2**32) // large value
(2**-(-2*16))==4294967296
(3**-(2*-(1/2)+2)--2+3**2%0.66+2)==-(-4.75333333) 
(22/7 == 3.14) && (3.14 > 3) && ('a' > 'A') || !false
"Africa" < "Bangladesh" // string comparisons
"bb" == "bb"
"Pretty Flower" != "Pretty tree"
!!!false
!!true && !!--3
!(1---(1 as float) as bool)
'\t' as string == "\t"
'@' + '¤' + "hey" + ' ' + 'c' == "@¤hey c"
"ab" + 'c' == "abc"
'a' + "bc" == "abc"
"@ßĈ-" + ">ĎĔF" == "@ßĈ->ĎĔF"
2++-2 == 0 
2**(2**(-1**+2))==1.41421356
9223372036854775807==(2**63-1) // int64 test
'ﬁ' + 'ﬁ' == "ﬁﬁ"
'Ј'+"ЈЈ"+'Ј'=="ЈЈЈЈ"
-2**--16==-65536
# cast syntax test
3.14 as bool // float -> bool 
'c' as string == "c" // char -> string 
'c' as char == 'c' 
3 as int == 3; 
"3.14" as float == 3.14 
3.14 as string == "3.14" 
'c' as string == "c"
"a" < 'b' as string
# member access syntax test
Fox.std.io.print
(Fox.io.someobject).asInt()
(3+33).asFloat()
"Hello".size
Test.attr.test().attr.attr.test()
# more cast tests.
'c' as bool
"a string" as char
"a int" as string
"a float" as float
"a var" as int
#Array access tests
arr[0]
arr[0][1]
arr[0][1][2]
arr[0][1][2][3]
arr[0][1][2][3][4]
arr[0][1][2][3][4][5]
#Function call test
testfunc()
testfunc("Arg1",2,'3')
testfunc(false)
#Array access on function call test
testfunc()[0]
testfunc()[0][1]
testfunc()[0][1][2]
testfunc()[0][1][2][3]
testfunc()[0][1][2][3][4]
testfunc()[0][1][2][3][4][5]
#Complex Member accesses
testfunc()[0][1].myField[1].myFunc()
Fox.tests()[0].arrayField[1].callFunc()
#Extreme edge case
foo()[0][1][2][3][4][5].lhs.bar()[0].foo().arr[0].hello
#array literals with inner literals
["hello","world","nice","to","meet","you"]
[0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4]
[true,false,true,false,true]
[]
[false]
['a','b','c']
# nested array literals
[ [0,1,2], [0,1,2], [0,1,2], [0,1,2], [0,1,2] ]
[ [ [0,1,2], [0,1,2], [0,1,2], [0,1,2], [0,1,2] ],[ [0,1,2], [0,1,2], [0,1,2], [0,1,2], [0,1,2] ],[ [0,1,2], [0,1,2], [0,1,2], [0,1,2], [0,1,2] ]]
[[], [], []]
[[[], [], []],[[], [], []],[[], [], []]]
[ [0], [1], [2], [3]]
# complex expressions within the literals
[ callF()[0], foo[0][1][2], (Fox.io.someobject).asInt(), (3**-(2*-(1/2)+2)--2+3**2%0.66+2)==-(-4.75333333) ]
