// RUN: %fox-dump-ast | %filecheck

//----------------------------------------------------------------------------//
// Test name binding to variables in global scope
//----------------------------------------------------------------------------//

func some_func_before() {}

// CHECK: VarDecl [[global_a_addr:0x([[:alnum:]]{8,16})]] {{.*}} let a 'int'
let a : int;

// CHECK-NEXT: FuncDecl [[foo_addr:0x([[:alnum:]]{8,16})]] {{.*}} foo '(char, [string]) -> void'
// CHECK-NEXT: ParamDecl [[param_a_addr:0x([[:alnum:]]{8,16})]] {{.*}} a 'char'
// CHECK-NEXT: ParamDecl [[mutParam_addr:0x([[:alnum:]]{8,16})]] {{.*}} mut mutParam '[string]'
func foo(a : char, mutParam : mut [string]) {
  // CHECK: DeclRefExpr {{.*}} 'char' a <decl:[[param_a_addr]]>
  a;
  // Check that a reference to a mutable variable has a "lvalue"
  // CHECK: DeclRefExpr {{.*}} lvalue 'double' b
  b;
  // CHECK: DeclRefExpr {{.*}} lvalue '[string]' mutParam <decl:[[mutParam_addr]]>
  mutParam;
  // CHECK-NEXT: DeclRefExpr {{.*}} '(char, [string]) -> void' foo <decl:[[foo_addr]]>
  foo;
  // CHECK-NEXT: DeclRefExpr {{.*}} '() -> void' some_func_before
  some_func_before;
  // CHECK-NEXT: DeclRefExpr {{.*}} '([bool], string) -> void' another_func_after
  another_func_after;
  // CHECK-NEXT: DeclRefExpr {{.*}} '(int) -> void' printInt {{.*}} (Builtin 'printInt')
  printInt;
}

// CHECK-NEXT: VarDecl {{0x([[:alnum:]]{8,16})}} {{.*}} var b 'double'
var b : double;

func another_func_after(baz: [bool], foz: string) {}