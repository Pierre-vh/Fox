// RUN: %fox-dump-ast | %filecheck

//----------------------------------------------------------------------------//
// Test name binding to variables in global scope
//----------------------------------------------------------------------------//

func some_func_before() {}

// CHECK: VarDecl [[global_a_addr:0x([[:alnum:]]{8,12})]] {{.*}} let a 'int'
let a : int;
// CHECK-NEXT: VarDecl [[global_b_addr:0x([[:alnum:]]{8,12})]] {{.*}} var b 'float'
var b : float;

// CHECK-NEXT: FuncDecl [[foo_addr:0x([[:alnum:]]{8,12})]] {{.*}} foo '(char,[string]) -> int'
// CHECK-NEXT: ParamDecl [[param_a_addr:0x([[:alnum:]]{8,12})]] {{.*}} a 'char'
// CHECK-NEXT: ParamDecl [[mutParam_addr:0x([[:alnum:]]{8,12})]] {{.*}} mut mutParam '[string]'
func foo(a : char, mutParam : mut [string]) : int {
  // CHECK: DeclRefExpr 'char' a <decl:[[param_a_addr]]>
  a;
  // Check that a reference to a mutable variable has a "lvalue"
  // CHECK: DeclRefExpr lvalue 'float' b <decl:[[global_b_addr]]>
  b;
  // CHECK: DeclRefExpr lvalue '[string]' mutParam <decl:[[mutParam_addr]]>
  mutParam;
  // CHECK-NEXT: DeclRefExpr '(char,[string]) -> int' foo <decl:[[foo_addr]]>
  foo;
  // CHECK-NEXT: DeclRefExpr '[string]' c
  c;
  // CHECK-NEXT: DeclRefExpr '() -> void' some_func_before
  some_func_before;
  // CHECK-NEXT: DeclRefExpr '([bool],string) -> char' another_func_after
  another_func_after;
}

// CHECK: VarDecl {{0x([[:alnum:]]{8,12}) .*}} let c '[string]'
// CHECK: DeclRefExpr 'int' a <decl:[[global_a_addr]]>
let c : [string] = [a as string];

func another_func_after(baz: [bool], foz: string) : char{}