import os
import sys
import lit
import lit.formats

# The Fox interpreter executable name
fox_interpreter_name = 'fox'

config.name = 'Moonshot'
config.suffixes = ['.fox']
config.test_format = lit.formats.ShTest(execute_external=False)
config.test_source_root = os.path.dirname(__file__)

fox_bin_dir = lit_config.params.get('fox_bin_dir', None)
fox_exe = fox_interpreter_name

if fox_bin_dir:
  print('Fox binaries dir: ' + fox_bin_dir)
  fox_exe = os.path.join(fox_bin_dir, fox_interpreter_name)
else:
  lit_config.error("Can't find the Fox binary in lit parameters or PATH")

# Create the base command
base_command = fox_exe + ' %s'

# Note: The order of append here is important, because items added first
# are considered by LIT first. 
#
# For instance, if %fox was at the top of the list any subst beginning 
# with %fox wouldn't be considered.
#
# So, the rule of thumb is to add the shortest substitutions at the end
# of the list, and the longest, most complete ones at the top of the
# list.
config.substitutions.append(
    ('%fox-verify', (base_command + ' -verify')))
config.substitutions.append(('%fox-dump-parse', (base_command + ' -parse-only -dump-ast')))
config.substitutions.append(('%fox-dump-bcgen', (base_command + ' -dump-bcgen')))
config.substitutions.append(('%fox-dump-ast', (base_command + ' -dump-ast')))
config.substitutions.append(('%fox', base_command))
# Use a substitution for FileCheck command in case I want to allow a 'filecheck_bin'
# parameter someday.
config.substitutions.append(('%filecheck', 'FileCheck %s')) 