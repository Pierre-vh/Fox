// RUN: %fox-verify

let a : double = 3.14;
let b : double = 1; // expect-error: cannot use an expression of type 'int' to initialize a variable of type 'double'

let d : int = 3.14; // expect-error: cannot use an expression of type 'double' to initialize a variable of type 'int'
let e : int = 1;

let g : bool = 3.14; // expect-error: cannot use an expression of type 'double' to initialize a variable of type 'bool'
let h : bool = 1; // expect-error: cannot use an expression of type 'int' to initialize a variable of type 'bool'
let i : bool = true;

let j : string = "foo";
let k : string = 'c'; // expect-error: cannot use an expression of type 'char' to initialize a variable of type 'string'
let l : string = 4; // expect-error: cannot use an expression of type 'int' to initialize a variable of type 'string'

let m : char = 'f';
let n : char = "foo"; // expect-error: cannot use an expression of type 'string' to initialize a variable of type 'char'
let o : char = 4; // expect-error: cannot use an expression of type 'int' to initialize a variable of type 'char'

var p : [int] = [1];
var q : [int] = 1; // expect-error: cannot use an expression of type 'int' to initialize a variable of type '[int]'

// infer tests
var r : [int] = [];
var s : [[[double]]] = [];

// Test that we can't use a variable declared later in the file inside an initializer
let t : int = u; // expect-error: undeclared identifier 'u'
let u : int = t; // this one should be correct

// Test that we can't use a variable inside it's own initial value in both global and local contexts.
let v : int = v; // expect-error: variable used inside its own initial value
func foo() {
  let w : int = w; // expect-error: variable used inside its own initial value
}