// RUN: %fox-verify

func subscript() {
  // Valid examples
  [0,1,2][0];
  [[0,1,2],[]][0];
  ([[[]]] as [[[int]]])[0][0][0];
  ['a', 'b', 'c'][0];
  "Hello, World!"[0];
  "abc"[2];
  [][3] as int;

  // An error should be emitted if the type of the subscript expr is float
  [1,1,1][1.25]; // expect-error: invalid types '[int]' and 'double' for array subscript

  // An error should be emitted if the type of the subscript expr is bool
  [0,1,2][true]; // expect-error: invalid types '[int]' and 'bool' for array subscript

  // An error should be emitted if the sub expr is not an array.
  0[0]; // expect-error: invalid types 'int' and 'int' for array subscript

  // An error should be emitted if the index expr is not numeric
  [0]['c']; // expect-error: invalid types '[int]' and 'char' for array subscript
}

func subscript_set() {
  // If the array isn't an lvalue, you can't assign to a subscript.
  [0, 1, 2][0] = 2; // expect-error: expression is not assignable
  // but if the type is an lvalue, you can.
  var mutArr : [int] = [];
  mutArr[0] = 2;

  // strings cannot be changed either
  let str : string = "Hello"; 
  str[0] = 'c'; // expect-error: expression is not assignable
}