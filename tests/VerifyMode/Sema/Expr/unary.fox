// RUN: %fox-verify

func foo() {
  // Every operator should work on numeric types
  -3;
  +42;

  -3.14;
  +42.314;

  !true;
  !false;

  // They shouldn't work on other types
  -"string"; // expect-error: cannot use unary operator '-' on an expression of type 'string'
  +"string"; // expect-error: cannot use unary operator '+' on an expression of type 'string'
  !"string"; // expect-error: cannot use unary operator '!' on an expression of type 'string'

  -'c'; // expect-error: cannot use unary operator '-' on an expression of type 'char'
  +'c'; // expect-error: cannot use unary operator '+' on an expression of type 'char'
  !'c'; // expect-error: cannot use unary operator '!' on an expression of type 'char'

  -[0]; // expect-error: cannot use unary operator '-' on an expression of type '[int]'
  +[0]; // expect-error: cannot use unary operator '+' on an expression of type '[int]'
  ![0]; // expect-error: cannot use unary operator '!' on an expression of type '[int]'

  -true; // expect-error: cannot use unary operator '-' on an expression of type 'bool'
  +true; // expect-error: cannot use unary operator '+' on an expression of type 'bool'

  !3;    // expect-error: cannot use unary operator '!' on an expression of type 'int'
  !3.14; // expect-error: cannot use unary operator '!' on an expression of type 'double'

  $0;
  $0.0;
  $true;
  $'c';
  $"str";         // expect-warning: useless cast to 'string': expression is already of type 'string'
  $returnsVoid;   // expect-error: cannot use unary operator '$' on an expression of type '() -> void'
  $returnsVoid(); // expect-error: cannot use unary operator '$' on an expression of type 'void'
  $[0];           // expect-error: cannot use unary operator '$' on an expression of type '[int]'
}

func returnsVoid() {}