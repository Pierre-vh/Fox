// RUN: %fox-verify

//---ADDITIVE---//
func additive_chck() {
  // Correct
  120000+85555;
  5648+32.005;
  0.001+333;
  0.999-0.998;
  'a'+'b';
  "abc"+"def";
  'a'+"bc";
  "abc"+'d';

  // Chaining
  1+2-3+4-5+6;
  'a'+'b'+"cd"+'d'+"ef";
  1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1;

  // Incorrect
  // expect-error@+1: cannot use binary operator '-' on expressions of types 'char' and 'char'
  'c'-'c'; 
  // expect-error@+1: cannot use binary operator '-' on expressions of types 'string' and 'string'
  "abc"-"def";
  // expect-error@+1: cannot use binary operator '+' on expressions of types 'bool' and 'char'
  true+'a';
  // expect-error@+1: cannot use binary operator '+' on expressions of types 'string' and 'int'
  "abc"+1;
  // expect-error@+1: cannot use binary operator '+' on expressions of types 'bool' and 'bool'
  true+false;
  // expect-error@+1: cannot use binary operator '+' on expressions of types 'bool' and 'int'
  false+42;
  // expect-error@+1: cannot use binary operator '-' on expressions of types 'bool' and 'double'
  false-3.14;
}

//---MULTIPLICATIVE---//
func multiplicative_chck() {
  // Correct
  20%3;
  40/2.5;
  20*3.14;

  // Chaining
  ((4*2)%3)/2;
  1*2*3*4*5/2;
  ((3%2)/2)*2000;

  // Incorrect
  // expect-error@+1: cannot use binary operator '/' on expressions of types 'char' and 'char'
  'c'/'c'; 
  // expect-error@+1: cannot use binary operator '*' on expressions of types 'string' and 'string'
  "abc"*"def";
  // expect-error@+1: cannot use binary operator '%' on expressions of types 'bool' and 'char'
  true%'a';
  // expect-error@+1: cannot use binary operator '/' on expressions of types 'string' and 'int'
  "abc"/1;
  // expect-error@+1: cannot use binary operator '%' on expressions of types 'bool' and 'bool'
  true%true;
  // expect-error@+1: cannot use binary operator '/' on expressions of types 'bool' and 'int'
  true/50;
  // expect-error@+1: cannot use binary operator '*' on expressions of types 'bool' and 'bool'
  true*false;
}

//---EXPONENT---//
func exponent_check() {
  // Correct
  4**3;
  3.14**2;
  3.14**1.5;

  // Incorrect
  // expect-error@+1: cannot use binary operator '**' on expressions of types 'char' and 'char'
  'c'**'c'; 
  // expect-error@+1: cannot use binary operator '**' on expressions of types 'string' and 'string'
  "abc"**"def";
  // expect-error@+1: cannot use binary operator '**' on expressions of types 'bool' and 'char'
  true**'a';
  // expect-error@+1: cannot use binary operator '**' on expressions of types 'string' and 'int'
  "abc"**1;
  // expect-error@+1: cannot use binary operator '**' on expressions of types 'int' and 'bool'
  20**false;
}

//---LOGICAL---//
func logical_check() {
  // Correct
  true && false;
  true || false;

  0 && 1;
  1 || 0;

  0.5 && 0.01;
  1.55 || 0.33;

  true && 0.33;
  false || 0;

  0.25 && 0;
  0 || 0;

  // Incorrect
  // expect-error@+1: cannot use binary operator '||' on expressions of types 'char' and 'int'
  'a' || 0;
  // expect-error@+1: cannot use binary operator '&&' on expressions of types 'string' and 'string'
  "foo" && "bar";
  // expect-error@+1: cannot use binary operator '||' on expressions of types 'string' and 'int'
  "foo" || 0;
  // expect-error@+1: cannot use binary operator '&&' on expressions of types 'char' and 'string'
  'c' && "c";
}

//---COMPARISON: (NOT) EQUAL---//
func comp_eq_neq_check() {
  // Correct
  true == true;
  false != true;

  2 != 1;
  85 == 55;

  0.333 == 0.333;
  0.605 != 0.305; 

  [1,2] == [1,2];
  [[[true]]] != [[[false]]];
  0 != 333.333;

  // Incorrect
  // expect-error@+1: cannot use binary operator '==' on expressions of types 'string' and 'char'
  "c"=='c';
  // expect-error@+1: cannot use binary operator '!=' on expressions of types 'char' and 'string'
  'a' != "bar";
  // expect-error@+1: cannot use binary operator '==' on expressions of types 'string' and 'int'
  "f" == 0;
  // expect-error@+1: cannot use binary operator '!=' on expressions of types '[int]' and 'int'
  [0] != 0;
  // expect-error@+1: cannot use binary operator '==' on expressions of types 'bool' and 'int'
  true == 1;
}

//---COMPARISON: RANKING---//
func comp_ranks_check() {
  // Correct
  42 < 2;
  3 >= 3;

  0.333 >= 0.333;
  0.605 <= 0.305; 

  0 <= 1;
  0 < 333.333;

  'a' > 'b';
  "ab" >= "bc";
  "cd" <= "de";
  "a" < "b";

  // Incorrect
  // expect-error@+1: cannot use binary operator '>' on expressions of types 'string' and 'char'
  "c" > 'c';
  // expect-error@+1: cannot use binary operator '<=' on expressions of types 'char' and 'string'
  'a' <= "bar";
  // expect-error@+1: cannot use binary operator '>=' on expressions of types 'string' and 'int'
  "f" >= 0;
  // expect-error@+1: cannot use binary operator '<=' on expressions of types '[int]' and 'int'
  [0] <= 0;
  // expect-error@+1: cannot use binary operator '>' on expressions of types 'bool' and 'bool'
  true > false;
}

//---ASSIGNEMENT---//
func assign_check() {
  // Check basic assignements
  var str : string;
  var ch : char;
  var i : int;
  var d : double;
  var b : bool;

  str = "";
  ch = 'x';
  i = 0;
  d = 0.0;
  b = false;

  // Invalid assignements (type mismatch)
  str = 'a';    // expect-error: cannot assign a value of type 'char' to type 'string'
  str = 0;      // expect-error: cannot assign a value of type 'int' to type 'string'
  str = 0.0;    // expect-error: cannot assign a value of type 'double' to type 'string'
  str = false;  // expect-error: cannot assign a value of type 'bool' to type 'string'
  
  ch = "s";     // expect-error: cannot assign a value of type 'string' to type 'char'
  ch = 0;       // expect-error: cannot assign a value of type 'int' to type 'char'
  ch = 0.0;     // expect-error: cannot assign a value of type 'double' to type 'char'
  ch = false;   // expect-error: cannot assign a value of type 'bool' to type 'char'

  i = "string"; // expect-error: cannot assign a value of type 'string' to type 'int'
  i = 'c';      // expect-error: cannot assign a value of type 'char' to type 'int'

  d = "string"; // expect-error: cannot assign a value of type 'string' to type 'double'
  d = 'c';      // expect-error: cannot assign a value of type 'char' to type 'double'

  b = "string"; // expect-error: cannot assign a value of type 'string' to type 'bool'
  b = 'c';      // expect-error: cannot assign a value of type 'char' to type 'bool'

  // Invalid assignements (downcast)
  i = 3.14;     // expect-error: cannot assign a value of type 'double' to type 'int'
  b = 0;        // expect-error: cannot assign a value of type 'int' to type 'bool'
  b = 3.14;     // expect-error: cannot assign a value of type 'double' to type 'bool'

  // Check that the type of the RHS can be inferred from the type of the LHS.
  var foo : [int];
  foo = []; 
  foo = [1, 2, 3];

  var deeperFoo : [[[int]]];
  deeperFoo = []; 
  deeperFoo = [[],[],[]];
  deeperFoo = [[[],[],[]], [[],[],[]], [[],[],[]]];
  deeperFoo = [[[1, 2, 3]]];
}